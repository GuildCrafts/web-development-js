#!/usr/bin/env ruby

require 'json'
require 'yaml'
require 'logger'
require 'fileutils'

require_relative '../lib/utils'

SKILL_TREE = ARGV.first

ROOT_PATH = File.expand_path('../../', __FILE__)
SKILLS_PATH = File.join(ROOT_PATH, 'skills')

$logger = Logger.new(STDOUT)

skills = JSON.parse(File.read(SKILL_TREE))

skills.each do |section|
  section_name = correct_spellings(section['section'])

  section_dir = fileize(section_name)
  section_path = File.join(SKILLS_PATH, section_dir)

  $logger.info "Creating skills section #{section_name}..."

  FileUtils.mkdir_p(section_path)

  groups = section['groups']
    .reject { |g| g['group'] =~ /template/i }
    .map do |group|
      raise "Incorrect level count for #{group['group']}" if group['subgroups'].count != 4

      group_name = correct_spellings(group['group'])
      levels = group['subgroups']
        .sort_by { |s| s['level'].to_i }
        .map.with_index do |level, index|
          level.delete('resources')
          level['skills'] = level.delete('skillsets')
          level['level'] = index
          level
        end

      {
        'section' => section_name,
        'group' => group_name,
        'path' => slugify("#{section_name}/#{group_name}"),
        'levels' => levels
      }
    end

  groups.each do |group|
    filename = fileize(correct_spellings(group['group'])) + '.yml'
    filepath = File.join(section_path, filename)

    $logger.info ">  Creating skill group #{group['group']}..."

    File.write(filepath, group.to_yaml(line_width: 72))
  end
end
