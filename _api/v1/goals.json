{"goals":[{"authors":["@jrob8577"],"teamSize":2,"issueNumber":104,"content":"\n# Work on Dragonboard\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications with Node.js and npm\n- Can write feature-complete, fully tested, quality code\n- Can debug programs in both client- and server-side environments\n- Have worked with teams to deploy web apps\n- Are familiar with the GitHub project management tools\n- Are interested in open-source web development\n- Are interested in collaborating on a living codebase\n\n## Description\n\nWork on an open-source clone of [geckoboard](https://www.geckoboard.com/).\n\nDragonboard is an ongoing project with a live app. You will be working in a [living codebase](https://github.com/GuildCrafts/lizardboard/commits/master) on [real issues](https://github.com/GuildCrafts/lizardboard/issues) with [other developers](https://github.com/GuildCrafts/lizardboard/graphs/contributors).\n\nWhen you join Dragonboard, you will select or be assigned issues to work on for the week. Be ready to jump in and contribute!\n\nRepo: https://github.com/GuildCrafts/lizardboard/\n<br>Conributing: https://github.com/GuildCrafts/lizardboard/blob/master/CONTRIBUTING.md\n\n## Context\n\nWorking on this codebase will expose you to some of the patterns and activities of a real software development team.\n\nYou'll be expected to commit clean, functional, well-written code on time. Every change will be reviewed. Be ready to adapt to changing circumstances and new challenges.\n\n## Specifications\n\nSpecifications and requirements will come from the issues tracked in the [repo's projects](https://github.com/GuildCrafts/lizardboard/projects).\n\n## Quality Rubric\n\nSee quality rubric in the project's [CONTRIBUTING](https://github.com/GuildCrafts/lizardboard/blob/master/CONTRIBUTING.md) file.\n"},{"authors":["@punitrathore"],"teamSize":2,"issueNumber":115,"content":"\n# Work on Coach-Que : Schedule Time & Incorporate Feedback\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications with Node.js and npm\n- Can write feature-complete, fully tested, quality code\n- Can debug programs in both client- and server-side environments\n- Can track and manage work using GitHub project management tools\n- Have worked with teams to deploy web apps\n- Are familiar with collaborating on a living codebase\n- Are interested in building features for a production app\n\n## Description\n\nBuild a tool for learners to schedule time with coaches at Learners Guild.\n\nThe tool will also help learners and coaches to give feedback on the time spent together.\n\nCoach-Que is an ongoing project. You will be working in a [living codebase](https://github.com/GuildCrafts/coach-que/commits/master) on [real issues](https://github.com/GuildCrafts/coach-que/issues) with [other developers](https://github.com/GuildCrafts/coach-que/graphs/contributors).\n\nWhen you join Coach-Que, you will select or be assigned issues to work on for the week. Be ready to jump in and contribute!\n\nRepo: https://github.com/LearnersGuild/coach-que\n<br>Site: http://coach-que.apps.learnersguild.org/\n\n## Context\n\nWorking on this codebase will expose you to some of the patterns and activities of a real software development team.\n\nYou'll be expected to commit clean, functional, well-written code on time. Every change will be reviewed. Be ready to adapt to changing circumstances and new challenges.\n\n## Specifications\n\nSpecifications and requirements will come from the issues tracked in the [repo's projects](https://github.com/GuildCrafts/coach-que/projects).\n\n## Quality Rubric\n\nQuality requirements will be determined by the nature of the work you take on. Check with other team members to learn what is expected.\n"},{"authors":["@punitrathore"],"teamSize":2,"issueNumber":120,"content":"\n# Set (the Game) with React\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can use nested conditionals to validate data\n- Have used React.js to implement simple apps\n- Are familiar with pattern-matching card games\n- Are familiar with the concept of \"separation of concerns\" in application design\n- Are interested in advancing your React.js skills\n\n## Description\n\nSet is a wonderfully simple and yet challenging pattern-matching card game. If you haven't played the real-life version, go find it and play it! It's a lot of fun.\n\nIn this goal, you will build a playable version of Set as a static web site (i.e. no server-side logic). You'll have to implement the game logic using JavaScript and the [React.js](https://facebook.github.io/react/) library.\n\nThe official rules of the game are described in full in [this document](http://www.setgame.com/sites/default/files/instructions/SET%20INSTRUCTIONS%20-%20ENGLISH.pdf). Use it as your reference for both the game logic and the card design.\n\n## Context\n\nSet is a game with a small set of rules. This game can be implemented in any technology, although it is a perfect candidate for React because of the real-time nature of the game play.\n\nThis goal will challenge your ability to take a _formal, defined system_ from the real world and replicate it in code. You will start with all of the logic of the system (the rules of the game) and most of the UI already designed (use the card graphics). Your work will be mainly in deciding how to replicate that formal logic and user interface using JavaScript, HTML, and CSS.\n\nIf you choose this goal, you will have to consider questions such as:\n\n- How should the game track its own state?\n- Where should the pattern-matching logic lie?\n- How should the view layer be separated from the game logic layer?\n- What data structures should be used to store the cards?\n\nThis goal will especially exercise your [domain modeling](https://en.wikipedia.org/wiki/Domain_model) skills.\n\n## Specifications\n\n- [ ] App has one page that displays the full game\n- [ ] Deck has 81 shuffled cards\n- [ ] When launched, game deals 12 cards from deck in a 4x3 grid\n- [ ] Player has a score (starts at 0)\n- [ ] Player can press a button to reset the game\n  - [ ] When pressed, deck is regenerated and reshuffled and a new grid is dealt\n- [ ] Player can press a button to deal 3 more cards into the grid (now 5x3)\n- [ ] Player can click to select 3 cards and UI will indicate that the cards have been \"selected\"\n  - [ ] When the player selects 3 cards that _are_ a set, the cards are replaced with new ones and the player's score increments by 1\n  - [ ] When the player selects 3 cards that _are not_ a set, the player is shown a temporary error message (\"Not a set\") and the cards are automatically de-selected\n- [ ] When there are no more cards in the deck or remaining cards have no sets in them, game is over\n  - [ ] \"Game Over\" message is displayed\n  - [ ] \"New Game\" button is displayed, which starts a new game if clicked\n- [ ] Cards and their graphics are rendered with [CSS shape tricks](https://css-tricks.com/examples/ShapesOfCSS/) (not images)\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nAs a stretch goal, implement multiplayer Set. More than one player can play at once on the same deck.\n\n- [ ] Each player writes their own name when they join the game\n- [ ] Each player has a score on a scoreboard next to their name (starting at 0)\n- [ ] Once one player selects a card, the grid is frozen for other players\n  - [ ] Player has 5 seconds to select the two other cards\n  - [ ] Countdown timer is displayed to the selecting player\n  - [ ] If 5 seconds pass and they don't select all 3 cards, all their cards are de-selected and the grid is \"unfrozen\" (other players can select again)\n  - [ ] All players are notified of the player who is currently selecting (using their name)\n- [ ] When a player selects a set, all players are notified of who got the set with a temporary message\n- [ ] When game is over, scoreboard is displayed to all players\n\n## Quality Rubric\n\n**Separation of concerns**\n- Game logic is separated from the rendering logic. [100 points]\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n"},{"authors":["@tannerwelsh"],"issueNumber":123,"teamSize":2,"content":"\n# Core Algorithms\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can use problem decomposition to split difficult problems into smaller parts\n- Have used pseudocode as an intermediary step in writing a program\n- Are interested in common computer science algorithms\n- Are interested in critical thinking and problem solving\n\n## Description\n\nWrite tests and implementations for algorithms commonly used in job interviews.\n\nFork the the [core-algorithms repository][core-algorithms] and use the fork as your project artifact.\n\nUse the list in the [algorithms.md][algorithms-list] file as a reference for each algorithm.\n\n## Context\n\nBeing able to design, implement, and test algorithms is a key skill for all programmers. Most of the algorithms you'll encounter on the job will not fall neatly into the set of \"common algorithms\" specified here, but will be new problems for which you will have to find new solutions and adapt existing ones.\n\nFor this reason, developing the ability to do **algorithmic thinking** is a high-value skill.\n\nIn addition, many job interview processes will include some algorithmic problem-solving component, and it is useful to be familiar with some of the most common problems and good approaches to find their solutions.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [core-algorithms][core-algorithms] repo.\n- [ ] Can run all tests with `npm test`.\n- [ ] All tests are passing.\n- [ ] For each algorithm in the [algorithms list][algorithms-list], there exists:\n  - [ ] a test file with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n  - [ ] an implementation file with a correct implementation of the algorithm.\n\n### Required\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nPick a _different_ programming language from JavaScript (e.g. Ruby, Swift, Python, C, Java...) and write tests & implementations for each.\n\n- [ ] Can run all non-JavaScript tests with a single command.\n- [ ] For each algorithm identified above, there exists:\n  - [ ] a test file with multiple unit tests for each algorithm  _in a language other than JavaScript_.\n  - [ ] an implementation file with a correct implementation of the algorithm _in a language other than JavaScript_.\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n[core-algorithms]: https://github.com/GuildCrafts/core-algorithms\n[algorithms-list]: https://github.com/GuildCrafts/core-algorithms/blob/master/algorithms.md\n"},{"authors":["@tannerwelsh"],"teamSize":2,"issueNumber":124,"content":"\n# Multiple Paradigms\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can write and format documents using Markdown\n- Can read and write HTML\n- Can do file I/O with Node.js\n- Are familiar with parsing\n- Are familiar with the concept of programming paradigms\n- Are interested in object-oriented programming\n- Are interested in functional programming\n- Are interested in comparing/contrasting programming styles\n\n## Description\n\nImplement a Markdown parser using three different programming paradigms: **object-oriented**, **functional**, and **imperative**.\n\nFork the [multiple-paradigms][multiple-paradigms] repository and use the fork as your project artifact.\n\nThe repository includes a skeleton script at `bin/parse` where you need to load and execute your Markdown parsers for each programming paradigm.\n\nTo parse a file, use the `npm run parse:<paradigm> <file.md>` command, where `<paradigm>` is one of either `oo` (object-oriented), `functional`, or `imperative` and `<file.md>` is a path to a Markdown-formatted file.\n\nFor example, say we have a file `hello.md` with the contents:\n\n```shell-session\n$ cat hello.md\n_Hello_.\n\n- My name is **Inigo Montoya**.\n- You killed my father.\n- Prepare to die.\n```\n\n...then the command `npm run parse:oo hello.md` (or `parse:functional`, or `parse:imperative`) should print the following:\n\n```shell-session\n$ npm run parse:oo hello.md\n<p><em>Hello</em>.</p>\n<ul>\n<li>My name is <strong>Inigo Montoya</strong>.</li>\n<li>You killed my father.</li>\n<li>Prepare to die.</li>\n</ul>\n```\n\n## Context\n\nKnowing how, when, and where to apply a particular _programming paradigms_ to a a piece of code is a key skill of any self-respecting software developer.\n\nBeing fluent in different paradigms will help you to think about and understand software architecture, and to make better design choices. It is also a crucial tool for communicating effectively with other developers.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [multiple-paradigms][multiple-paradigms] repo.\n- [ ] Can run all tests with `npm test`.\n- [ ] All tests are passing.\n- [ ] Can parse Markdown syntax ([reference](https://help.github.com/articles/basic-writing-and-formatting-syntax/)) and render correct HTML for...\n  - [ ] Paragraphs\n  - [ ] Headings\n  - [ ] Italicized text\n  - [ ] Bold text\n  - [ ] Links\n  - [ ] Images\n  - [ ] Unordered lists\n  - [ ] Ordered lists\n  - [ ] Blockquotes\n  - [ ] Horizontal rules\n  - [ ] Inline codes\n  - [ ] Code blocks\n- [ ] Object-oriented implementation employs key characteristics of the object-oriented style\n  - [ ] Encapsulation\n  - [ ] Message passing with objects\n  - [ ] Composition, inheritance, and delegation\n  - [ ] Polymorphism\n- [ ] Functional implementation employs key characteristics of the functional style\n  - [ ] Higher-order functions\n  - [ ] Pure functions\n  - [ ] Recursion\n  - [ ] Referential transparency\n- [ ] Imperative implementation employs key characteristics of the imperative style\n  - [ ] Subroutines\n  - [ ] Linear control flow\n  - [ ] Sequential state modifications\n  - [ ] Looping and branching statements\n\n### Required\n\n_Do not remove these specs - they are required for all goals_.\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nFor each programming paradigm, write a Markdown parser using a language that _specializes in that paradigm_.\n\n- [ ] Object-oriented-style Markdown parser is written in either [Java](https://www.java.com/en/) or [Ruby](https://www.ruby-lang.org/)\n- [ ] Functional-style Markdown parser is written in either [Clojure](https://clojure.org/) or [Haskell](https://www.haskell.org/)\n- [ ] Imperative-style Markdown parser is written in either [C](https://en.wikipedia.org/wiki/C_(programming_language)) or [Go](https://golang.org/)\\*\n\n_\\*It is a bit blasphemous to say that Go specializes in imperative programming, as it is a highly sophisticated language. That being said, it works just fine when using an imperative style._\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n[multiple-paradigms]: https://github.com/GuildCrafts/multiple-paradigms\n"},{"authors":["@tannerwelsh"],"teamSize":4,"issueNumber":125,"content":"\n# Mock Interview Trials\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications\n- Can contribute effectively on a team of web developers\n- Can write feature-complete, quality code\n- Can discuss and explain software using correct and precise technical terms\n- Have solved logic puzzles while verbalizing your thought process\n- Have used a whiteboard to diagram software systems\n- Are familiar with typical software engineering interview questions\n- Are interested in practicing being interviewed\n\n## Description\n\nPractice your interviewing skills with mock interview trials.\n\nFork the [interview-trials][interview-trials] repository and use the fork as your project artifact.\n\nTo complete this goal, each team member should conduct at least two interview trials with an interviewer. The rest of the time should be spent preparing for interviews and practicing common interview questions.\n\nAt the end of the project, submit the trial files for each interview conducted, along with the questions used, the interviewee reflection, and the interviewer's evaluation.\n\nIt is up to the interviewer to decide how they wish to conduct their interviews, but they should all use the same evaluation format provided in the repository.\n\n## Context\n\nUnfortunately, just being good at building software with a team is not enough to get hired as a software developer. The job interview is its own thing.\n\nIf you want to get a job, you'll need to _also_ be good at interviewing. This will mean different things for different companies, positions, and interviewers. There is no one question that they all ask, or one skill that they all look for.\n\nAs a result, the best way to prepare is to do \"mock\" interviews as a trial, with plenty of feedback from the interviewer. Not only will this give you practice answering questions and solving problems in an interview setting, but it will also help to demystify the interview process.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [interview-trials][interview-trials] repo.\n- [ ] At least two completed mock interviews per team member, with all trial files added to `trials/`.\n- [ ] Trial files for interviews are complete, including:\n  - Questions asked\n  - Interviewee reflections\n  - Interviewer evaluation\n\n## Quality Rubric\n\n- Commit messages are concise and descriptive. [25 points]\n- All new questions/trials are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[interview-trials]: https://github.com/GuildCrafts/interview-trials\n"},{"authors":["@tannerwelsh"],"issueNumber":126,"teamSize":2,"content":"\n# MetroRail: Data Modeling & Database Design\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build apps using Node.js and npm\n- Can create a relational database\n- Can perform basic operations on a relational database\n- Can interact with a relational database from JavaScript\n- Are familiar with ORM (Object-Relational Mapping)\n- Are interested in database schema design\n- Are interested in program interface design\n\n## Description\n\nBuild the data model and database for a city transit system.\n\nFork the [metrorail][metrorail-repo] starter repo to start your project.\n\nThis particular city has a simple transit system: just one circular train line with 12 stations and 4 trains.\n\nWhen complete, you'll have an API for working with at least 3 models with database persistence. You'll be able to write scripts that look like this (although they may not have exactly the same interface, this is just an example):\n\n```javascript\nconst Station = require('./models/station')\nconst Passenger = require('./models/passenger')\n\n// let's move a passenger \"Sam\" from the Downtown station to Waterfront...\nconst sam = Passenger.find({name: 'Sam'})\nconst downtown = Station.find({location: 'Downtown'})\nconst waterfront = Station.find({location: 'Waterfront'})\n\nsam.setStation(downtown)\nsam.buyTicket({to: waterfront})\n\nconst train = downtown.nextTrain()\ntrain.moveToNextStation()\ntrain.onboard()\n\nwhile (train.currentStation !== waterfront) {\n  train.moveToNextStation()\n}\n\ntrain.offboard()\nsam.currentStation\n// Sam is now at the Waterfront!\n```\n\nUse whichever database you prefer. However, it is recommended that you use a relational, open-source data store like PostgreSQL.\n\nTo help you get started with some seed data, here is a list of the train stations in this fictional city (they are along a circular line, so the station after `Museum Isle` is `Downtown`).\n\n```\n1. Downtown\n2. Elm Street\n3. Forest Gardens\n4. Annex\n5. 10th Ave\n6. Waterfront\n7. Colosseum\n8. Central Station\n9. Parkside\n10. Grand Boulevard\n11. Monument Valley\n12. Museum Isle\n```\n\nWhen you complete this goal, consider doing the next iteration: [MetroRail: Web API Design, Building, and Documentation][metrorail-web-api].\n\n## Context\n\nMost of software is a _model_ of some real-world system. It follows that being able to develop good models is a crucial skill.\n\nIn this case, the model is both one that should be familiar to anyone who has ever ridden public transit in a city. You also have very clear specifications to follow, so most of the guesswork has been taken out of the process.\n\nAs you build this project, you'll likely encounter questions such as:\n\n- Is this a property or a method?\n- If a method, is it a method of the instance or the class?\n- Where does this feature belong? If in a class, which class?\n- What are the expected inputs and outputs?\n- What is an unexpected input?\n- How should I test this?\n- How can the program handle failure gracefully?\n- When and how should model data be retrieved from and persisted to the data store?\n\n## Specifications\n\n#### Commands\n\nExpose the following commands (and more, if you need) using the `scripts` property of your `package.json`.\n\n- [ ] `$ npm run test`: run all tests.\n- [ ] `$ npm run repl`: open a REPL session with all your library code loaded.\n- [ ] `$ npm run db:create`: create the database for the current `NODE_ENV`.\n- [ ] `$ npm run db:migrate`: run all schema migrations for the database.\n- [ ] `$ npm run db:seed`: insert seed (sample) data into the database.\n- [ ] `$ npm run db:drop`: delete the database for the current `NODE_ENV`.\n- [ ] `$ npm run db:reset`: drop, create, and migrate the database.\n- [ ] `$ npm run db:console`: open a console session for running queries against the database.\n\n#### User Stories\n\nCreate models with interfaces to satisfy the following user stories, assuming the \"user\" in this case is a programmer using your data model.\n\n- [ ] As a user of the `Train` model, I can...\n  - [ ] get the number of a particular train.\n  - [ ] get the capacity for passengers of a particular train.\n  - [ ] get the passengers of a particular train.\n  - [ ] determine whether a particular train is full (at capacity) or not.\n  - [ ] determine the current station of a particular train.\n  - [ ] determine the next station of a particular train.\n  - [ ] determine which train is arriving next at a particular station.\n  - [ ] move a train to its next station.\n  - [ ] offboard passengers whose destination is a train's current station.\n  - [ ] onboard passengers of a train at the current station.\n  - [ ] find a train by its number.\n  - [ ] create a new train.\n  - [ ] save new trains to the database.\n  - [ ] update existing trains in the database.\n  - [ ] delete a train from the database.\n- [ ] As a user of the `Train` model, I receive appropriate and descriptive errors.\n- [ ] As a user of the `Station` model, I can run unit tests that exercise the specs for every public property, instance method, and class method.\n- [ ] As a user of the `Station` model, I can...\n  - [ ] get the ID of a particular station.\n  - [ ] get the location of a particular station.\n  - [ ] get the passengers waiting for a train at a particular station.\n  - [ ] get the passengers who have tickets at a particular station.\n  - [ ] get the previous station on the line for a particular station.\n  - [ ] get the next station on the line for a particular station.\n  - [ ] determine which is the next train arriving at a particular station.\n  - [ ] find a station by its ID.\n  - [ ] find a station by its location.\n  - [ ] create a new station.\n  - [ ] save new stations to the database.\n  - [ ] update existing stations in the database.\n  - [ ] delete a station from the database.\n- [ ] As a user of the `Station` model, I receive appropriate and descriptive errors.\n- [ ] As a user of the `Station` model, I can run unit tests that exercise the specs for every public property, instance method, and class method.\n- [ ] As a user of the `Passenger` model, I can...\n  - [ ] get the ID of a particular passenger.\n  - [ ] get the name of a particular passenger.\n  - [ ] get a particular passenger's ticket.\n  - [ ] set the current station of a particular passenger.\n  - [ ] buy a ticket for a particular passenger from their current station to another specified station.\n  - [ ] use a ticket for a particular passenger.\n  - [ ] determine the current train for a particular passenger.\n  - [ ] determine the current station for a particular passenger.\n  - [ ] find a passenger by their ID.\n  - [ ] find a passenger by their name.\n  - [ ] find all passengers at a station.\n  - [ ] find all passengers on a train.\n  - [ ] create a new passenger.\n  - [ ] save new passengers to the database.\n  - [ ] update existing passengers in the database.\n  - [ ] delete a passenger from the database.\n- [ ] As a user of the `Passenger` model, I receive appropriate and descriptive errors.\n- [ ] As a user of the `Station` model, I can run unit tests that exercise the specs for every public property, instance method, and class method.\n\n### Required\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nPick a _different_ database from the one you used (some ideas: CouchDB, Mongo, Neo4J, MariaDB) and write an alternate implementation.\n\n- [ ] Equivalent commands exist for the alternate database.\n- [ ] A database module exists with configuration options to specify which database to use.\n- [ ] All tests pass when using the alternate database.\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n[metrorail-repo]: https://github.com/GuildCrafts/metrorail\n[metrorail-web-api]: ./127-MetroRail-Web_API.md\n"},{"authors":["@tannerwelsh"],"issueNumber":127,"teamSize":2,"content":"\n# MetroRail: Web API Design, Building, and Documentation\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Have completed the [prerequisite challenge][metrorail-data-model]\n- Can build a web app using Node.js and npm\n- Can read and write JSON documents\n- Are familiar with HTTP verbs\n- Are interested in RESTful design\n- Are interested in web APIs\n\n## Description\n\nBuild an HTTP API for the data model/store from the [MetroRail: Data Modeling & Database Design][metrorail-data-model] goal. You need a working implementation of that goal before you can do this one.\n\nWhen complete, you'll have a web API for interacting with the fictional transit system. You'll be able to send HTTP requests, with a username and token provided for authentication, and receive a JSON response.\n\n```shell-session\n$ curl -u $USERNAME:$TOKEN -X GET http://localhost:4000/api/trains/\n{\n  \"status\": \"success\",\n  \"data\": [\n    {\n      \"number\": 1,\n      \"currentStationId\": 3,\n      \"capacity\": 20,\n      \"passengers\": [\n        {\n          \"id\": 19,\n          \"name\": \"Bill\"\n        },\n        {\n          ...\n        }\n      ]\n    },\n    {\n      ...\n    }\n  ]\n}\n```\n\n## Context\n\nWhenever you write code that may be used by someone besides you (which, hopefully, is most of the time), it is important to pay careful attention to the design of your code's _interface_.\n\nMost large-scale web applications provide a programmatic interface via HTTP so that the developer community can build tools and products on top of their services.\n\nPart of your skillset as a developer will necessarily involve _consuming_ an HTTP API, but just as important is knowing how to _produce_ an API.\n\nAs you build this project, you'll likely encounter questions such as:\n\n- Which endpoints should the API offer?\n- Which endpoints should be public? Which endpoints protected by authentication?\n- What is the shape of the data that should be returned?\n- Where should this code live to keep the codebase organized and well-structured?\n- How should authentication work?\n- When and why should error messages be returned?\n- Where and why is the code vulnerable to attack or performance stress?\n- What tools and/or standards should I use when producing documentation?\n\n## Specifications\n\n#### Commands\n\nExpose the following commands (and more, if you need) using the `scripts` property of your `package.json`.\n\n- [ ] `$ npm run test`: run all tests.\n- [ ] `$ npm run start`: start a web server for the API (at `/api`).\n- [ ] `$ npm run docs`: generate documentation for the API and/or start a server for rendering the docs (you can use something like http://apidocjs.com/).\n\n#### User Stories\n\nCreate models with interfaces to satisfy the following user stories, assuming the \"user\" in this case is a programmer consuming your web API.\n\n- [ ] As a user of the API, I can...\n  - [ ] use `HTTP GET` requests...\n    - [ ] to receive a list of all trains.\n    - [ ] to receive a list of all stations.\n    - [ ] to receive a list of all passengers.\n    - [ ] to find trains by number or their next station.\n    - [ ] to find stations by location or ID.\n    - [ ] to find passengers by name, train, or current location.\n  - [ ] use `HTTP POST` requests...\n    - [ ] to create a new train.\n    - [ ] to create a new station.\n    - [ ] to create a new passenger.\n  - [ ] use `HTTP PUT` or `HTTP PATCH` requests...\n    - [ ] to update a train.\n    - [ ] to update a station.\n    - [ ] to update a passenger.\n  - [ ] use `HTTP DELETE` requests...\n    - [ ] to delete a train.\n    - [ ] to delete a station.\n    - [ ] to delete a passenger.\n  - [ ] receive appropriate and descriptive error messages.\n  - [ ] run unit tests that exercise the specs for every route defined.\n  - [ ] run behavior (or end-to-end) tests that exercise use cases in their entirety.\n\n#### Design & Architecture\n\n- [ ] All API endpoints follow a RESTful design approach.\n- [ ] Files are organized and named demonstrating clear separation of concerns: web server, routing, data model, database connection/adapter, tests, etc.\n- [ ] Authentication is enforced for all write operations.\n- [ ] Authentication is enforced for some read operations (you determine which data should be unprotected and publicly available).\n- [ ] Documentation produced is accurate and easily referenced.\n- [ ] HTTP responses use the correct status code header.\n- [ ] HTTP responses use the correct content type header.\n\n### Required\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nBuild an alternate API using [GraphQL](http://graphql.org/) and serve it at the route `/graphql`.\n\n- [ ] All data and actions accessible via `/api` are possible via `/graphql`.\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n\n[mit-license]: https://opensource.org/licenses/MIT\n[metrorail-data-model]: ./126-MetroRail-Data_Modeling.md\n"},{"authors":["@tannerwelsh"],"issueNumber":128,"teamSize":2,"content":"\n# Core Data Structures\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can use problem decomposition to split difficult problems into smaller parts\n- Are familiar with the interfaces of core JavaScript objects: Object, Array, String, etc.\n- Are interested in common data structures\n- Are interested in critical thinking and problem solving\n\n## Description\n\nWrite tests and implementations for common data structures.\n\nFork the the [core-data-structures repository][core-data-structures] and use the fork as your project artifact.\n\nUse the list in the [data-structures.md][list-ds] file as a reference for each data structure's interface.\n\n## Context\n\nIf you spend most of your time programming in high-level languages, you may not realize how often you use data structures or how they are built. Sometimes it's useful to peek under the hood and see how the engine works.\n\nThe nice thing is, most data structures are **actually quite simple** when you get down to it. They have straight-forward, relatively small interfaces.\n\nIn a larger sense, being more familiar with data structures is helpful for you ability to think about data more abstractly, and to design better software.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [core-data-structures][core-data-structures] repo.\n- [ ] Can run all tests with `npm test`.\n- [ ] All tests are passing.\n- [ ] For each data structure in [the list][list-ds], there exists:\n  - [ ] a test file with unit tests for each method and property.\n  - [ ] an implementation file with a correct implementation of the data structure.\n\n### Required\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nPick a _different_ programming language from JavaScript (e.g. Ruby, Swift, Python, C, Java...) and write tests & implementations for each.\n\n- [ ] Can run all non-JavaScript tests with a single command.\n- [ ] For each data structure identified above, there exists:\n  - [ ] a test file with unit tests for each method and property _in a language other than JavaScript_.\n  - [ ] an implementation file with a correct implementation of the data structure _in a language other than JavaScript_.\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n[core-data-structures]: https://github.com/GuildCrafts/core-data-structures\n[list-ds]: https://github.com/GuildCrafts/core-data-structures/blob/master/data-structures.md\n"},{"authors":["@deadlyicon"],"teamSize":2,"issueNumber":130,"content":"\n# Work on Prrr\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications with Node.js and npm\n- Can write feature-complete, fully tested, quality code\n- Can debug programs in both client- and server-side environments\n- Can track and manage work using GitHub project management tools\n- Have worked with teams to deploy web apps\n- Are familiar with collaborating on a living codebase\n- Are interested in building features for a production app\n\n## Description\n\nPrrr (Pull Request Review Request) is a tool for learners to request reviews for their pull requests. Yup. The name is that explanatory.\n\nPrrr is an ongoing project with a live app. You will be working in a [living codebase](https://github.com/GuildCrafts/prrr/commits/master) on [real issues](https://github.com/GuildCrafts/prrr/issues) with [other developers](https://github.com/GuildCrafts/prrr/graphs/contributors).\n\nWhen you join Prrr, you will select or be assigned issues to work on for the week. Be ready to jump in and contribute!\n\nRepo: https://github.com/GuildCrafts/prrr\n<br>Tickets: https://github.com/GuildCrafts/prrr/projects/1\n<br>Bugs: https://github.com/GuildCrafts/prrr/issues\n\n## Context\n\nWorking on this codebase will expose you to some of the patterns and activities of a real software development team.\n\nYou'll be expected to commit clean, functional, well-written code on time. Every change will be reviewed. Be ready to adapt to changing circumstances and new challenges.\n\n## Specifications\n\nSpecifications and requirements will come from the issues tracked in the [repo's projects](https://github.com/GuildCrafts/prrr/projects).\n\n## Quality Rubric\n\nQuality requirements will be determined by the nature of the work you take on. Check with other team members to learn what is expected.\n"},{"authors":["@shereefb"],"teamSize":2,"issueNumber":140,"content":"\n# Work on Newbie\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications with Node.js and npm\n- Can write feature-complete, fully tested, quality code\n- Can debug programs in both client- and server-side environments\n- Can track and manage work using GitHub project management tools\n- Have worked with teams to deploy web apps\n- Are familiar with collaborating on a living codebase\n- Are interested in building features for a production app\n\n## Description\n\nBuild a tool to onboard new Learners Guild members and help them and their mentors co-ordinate tasks that need to get done.\n\nNewbie is an ongoing project with a live app. You will be working in a [living codebase](https://github.com/GuildCrafts/newbie/commits/master) on [real issues](https://github.com/GuildCrafts/newbie/issues) with [other developers](https://github.com/GuildCrafts/newbie/graphs/contributors).\n\nWhen you join Newbie, you will select or be assigned issues to work on for the week. Be ready to jump in and contribute!\n\nRepo: https://github.com/GuildCrafts/newbie/\n\n## Context\n\nWorking on this codebase will expose you to some of the patterns and activities of a real software development team.\n\nYou'll be expected to commit clean, functional, well-written code on time. Every change will be reviewed. Be ready to adapt to changing circumstances and new challenges.\n\n## Specifications\n\nSpecifications and requirements will come from the issues tracked in the [repo's projects](https://github.com/GuildCrafts/newbie/projects).\n\n## Quality Rubric\n\nQuality requirements will be determined by the nature of the work you take on. Check with other team members to learn what is expected.\n"},{"authors":["@bundacia"],"teamSize":2,"issueNumber":143,"content":"\n# Apprentice with the LOS Team\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications with Node.js and npm\n- Can write feature-complete, fully tested, quality code\n- Can debug programs in both client- and server-side environments\n- Can track and manage work using a project management tool\n- Can collaborate effectively on a living codebase\n- Can build, deploy, and maintain a web app with real users\n- Are familiar with a variety of libraries and frameworks\n- Are familiar with several databases and their tradeoffs\n- Are interested in contributing to a large, real-world web application\n- Are interested in using professional project management processes and tools\n\n## Description\n\nJoin the LOS team to build the software that we use every day at Learners Guild.\n\nUnder the direction of one of the LOS Software Engineers, work on features or bugfixes from the backlog.\n\nYou will need to get the LOS apps running locally if you haven't already.\n\n- https://github.com/LearnersGuild/idm\n- https://github.com/LearnersGuild/game\n- https://github.com/LearnersGuild/graphiql\n\nFollow the instructions in the README for each repo, starting with [IDM](https://github.com/LearnersGuild/idm).\n\n## Context\n\nThis is the real deal.\n\nYou'll be working on real issues that really need to ship on a real app with real users. You'll be doing a mix of pairing with your team and doing cognitive apprenticeship with one of the LOS Software Engineers.\n\nYou should choose this goal if you are ready to try being part of a team working on a complex system of interconnected apps with real users and constraints. Be ready to adapt to changing circumstances and new challenges.\n\n## Specifications\n\nSpecifications and requirements will come from LOS story tickets in [Clubhouse](https://app.clubhouse.io/learnersguild/) (the LOS issue tracking system).\n\n## Quality Rubric\n\nQuality requirements will be determined by the nature of the work you take on. No code will be merged without first being reviewed, and you can expect a high bar for quality.\n"},{"authors":["@deonna"],"issueNumber":144,"teamSize":1,"content":"\n# 15 Coding Exercises\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can use problem decomposition to split difficult problems into smaller parts\n- Have used pseudocode as an intermediary step in writing a program\n- Are interested in critical thinking and problem solving\n\n## Description\n\nComplete 15 JavaScript coding exercises from the [coding-exercises-js][coding-exercises-js] repo.\n\nThese exercises involve writing small, single-file programs to solve a fun puzzle or problem.\n\nIn this goal, you'll be attempting to complete 15 exercises from [the list][readme].\n\nThe specs of this goal are designed to cover a wide range of basic concepts and get progressively more complex.\n\nWrite tests using the `assert` module in Node.js or whatever testing library you feel most comfortable with. Come up with your own inputs and outputs (using the example inputs and outputs as well) and try to test with as many (reasonable) edge cases as you can.\n\n## Context\n\n**Use a this goal to**:\n\n- Take a break from pairing\n- Get a sense of what you can accomplish by yourself\n- Work on flexing problem solving skills\n- Assess how much you've learned/grown as a developer\n\n**To get a proper self assessment:**\n\n- Start from scratch\n- Don't look at other repos\n- Understand and write every line of code\n- Ask for coaching sessions\n- Get frequent code reviews\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [coding-exercises-js][coding-exercises-js] repo.\n- [ ] Tests and correct implementations exist for the following exercises (it is recommended that you complete them in this order):\n  - [ ] 1. Guess The Number\n  - [ ] 2. Scrab-Bag\n  - [ ] 3. String Indices\n  - [ ] 4. Fibonacci Bases\n  - [ ] 5. The Disemvowling\n  - [ ] 6. Where in the JSON?\n  - [ ] 7. Who Wants A Date?\n  - [ ] 8. Play it again, JavaScript!\n  - [ ] 9. Parens-B-Gone\n  - [ ] 10. Resolving Symlinks\n  - [ ] 11. Lairotcaf\n  - [ ] 12. String Me Along\n  - [ ] 13. Braille\n  - [ ] 14. String Permutations\n  - [ ] 15. Finite State Gate\n- [ ] Can run all tests with `npm test`.\n- [ ] All tests are passing.\n\n### Required\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n[coding-exercises-js]: https://github.com/GuildCrafts/coding-exercises-js\n[readme]: https://github.com/GuildCrafts/coding-exercises-js/blob/master/README.md\n"},{"authors":["@deadlyicon"],"issueNumber":150,"teamSize":1,"content":"\n# Mac Calculator Clone\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build a full-stack web app using Node.js and npm\n- Can use HTML & CSS to design a UI from a mockup\n- Are interested in self-assessing your web developer skills\n\n## Description\n\nReplicate the builtin Mac calculator as a web app.\n\nThe specs for this goal are far too numerous to complete within a week. Do not expect to get everything done but try to get as much done as you can. They are designed to cover a wide range of basic concepts and get progressively more complex.\n\nThis goal has [5 linear stages][readme]. You must complete the specs of each stage before progressing onto the next. **The number of stages you complete will be the basis of your self assessment**, so keep track of how far you get, and aim to get farther next time.\n\nFork the the [mac-calculator-clone repository][mac-calculator-clone] and use the fork as your project artifact.\n\n## Context\n\n**Use a this goal to**:\n\n- Take a break from pairing\n- Get a sense of what you can accomplish by yourself\n- Work on flexing problem solving skills\n- Assess how much you've learned/grown as a developer\n\n**To get a proper self assessment**:\n\n- Do this goal solo\n- Start from scratch\n- Do as much as you can\n- Do not use any unmentioned frameworks\n- Do not look at other solutions to this goal\n- Understand and write every line of code\n- Ask for coaching sessions\n- Do not let coaches write code for you\n- Get frequent code reviews\n- Never copy and paste code from the Internet. Always type it out.\n\n## Specifications\n\nThe specs are broken down in the following 5 stages. Make sure to complete all the items in each stages's `Specs` section.\n\n- [Stage 1](#stage-1)\n- [Stage 2](#stage-2)\n- [Stage 3](#stage-3)\n- [Stage 4](#stage-4)\n- [Stage 5](#stage-5)\n\n**IMPORTANT:** When you complete a stage, before moving onto the next stage, tag the commit that completes stage N as `stage-N-complete` using [`git tag`](https://git-scm.com/book/en/v2/Git-Basics-Tagging). *Don't forget to push with `--tags`*.\n\n### Stage 1\n\nIn stage 1 you will only be using `HTML` and `CSS` to build a clone of the OS X calculator interface. You're only building the interface in this stage. You'll make the calculator work in stage 2.\n\n![calculator-in-browser](https://cloud.githubusercontent.com/assets/8385/22572099/6786dd74-e957-11e6-9340-278e63aa3809.png)\n\n##### In this stage you will be using at least the following skills:\n\n- HTML/CSS positioning\n- CSS text/type styling\n- Web Fonts\n- Proper HTML formatting\n- Proper CSS formatting\n- Proper DOM positioning of assets\n- Positioning with `inline`, `block` and `inline-block`\n- CSS pseudo-selectors\n- CSS transitions\n- Chrome Developer Tools Element tab\n\n##### During this phase you should…\n\n- Use [normalize.css](https://necolas.github.io/normalize.css/)\n- NOT use any other css frameworks or libraries\n- NOT use any JavaScript\n- NOT use an express server\n- NOT use images\n- NOT use `<table>` tags\n- NOT use `<form>` tags\n- NOT use `<input>` tags\n\n##### Specs\n\n- [ ] All text is in the [Roboto](https://fonts.google.com/specimen/Roboto) web font\n- [ ] Your `HTML` and `CSS` follows this [style guide](https://google.github.io/styleguide/htmlcssguide.xml)\n- [ ] The calculator is positioned in the center of the page, both vertically and horizontally\n- [ ] The calculator is a fixed size. It does not change in size when the page resizes.\n- [ ] If the window is too small for the calculator, the page scrolls, both vertically and horizontally\n- [ ] Each button has a CSS transition to slightly darken the background color on hover over 100ms\n- [ ] Each button has a CSS transition to slightly darken the background color on click over 100ms\n- [ ] All class names re: the calculator are name-spaced under `.calculator-…`\n- [ ] Your stylesheet contains little to no duplicate style declarations\n\n### Stage 2\n\nIn stage 2 you will be adding `JavaScript` to make the calculator work.\n\n##### In this stage you will be using at least the following skills:\n\n- ES5 syntax\n- Registering event listeners\n- Binding to the DOM Ready event\n- JavaScript closures\n- JavaScript callbacks\n- JavaScript formatting\n- Event Delegation\n- Event bubbling\n- Querying the DOM API\n- Manipulating the DOM using the DOM API\n- Avoiding using the DOM for state\n\n##### During this phase you should…\n\n- NOT use `jQuery` or any other `JavaScript` libraries or frameworks\n\n##### Specs\n\n- [ ] Your `JavaScript` is written in `ES5`\n- [ ] Your `JavaScript` follows this [style guide](https://google.github.io/styleguide/jsguide.html)\n- [ ] Your JavaScript defines 1 or less global variables\n- [ ] The Calculator display is not an `<input>`\n- [ ] Typing a relevant key at any point is reflected on the calculator\n- [ ] Typing a relevant key causes the corresponding button on the calculator to appear to have been pressed. AKA flashes active\n- [ ] The state of the calculator is not be stored in the `DOM`\n- [ ] The mathematical operations for your calculator are each their own function, and are defined outside of any DOM event handler\n- [ ] When the length of the number displayed exceeds the width available, the font-size deterministically drops\n\n### Stage 3\n\nIn stage 3 you are going to add a second calculator to the page. Both calculators will be exactly the same but work independently. This will likely require you to refactor some of the JavaScript you wrote in stage 2.\n\n![two-calculators-in-browser](https://cloud.githubusercontent.com/assets/8385/22572109/72df42ba-e957-11e6-8c9e-c9efd39045c1.png)\n\n##### In this stage you will be using at least the following skills:\n\n- Event delegation\n- JavaScript Constructors\n- Componentization\n- Composition\n\n##### During this phase you should…\n\n- duplicate the HTML for the calculator\n- NOT try and render a calculator from `JavaScript`\n- NOT use `jQuery` or any other `JavaScript` libraries or frameworks\n- consider using a constructor called `Calculator`\n- NOT give each calculator a unique `id` or `classname`\n\n##### Specs\n\n- [ ] Each calculator acts independently.\n- [ ] Clicking anywhere on a calculator focuses that calculator.\n- [ ] Typing a relevant key affects the focused calculator.\n- [ ] Use event delegation to avoid binding a `click` event listener to each button\n- [ ] The focused calculator is `opacity: 1`\n- [ ] The not-focused calculator is `opacity: 0.5`\n\n### Stage 4\n\nIn stage 4 you are going to move the work of your calculator to the server. This might seem silly but its a good way to practice moving logic from the browser to the server without the logic itself being too complex.\n\n##### In this stage you will be using at least the following skills:\n\n- Setting up a simple Node express server\n- XHR / AJAX requests\n- Sending conventional HTTP status codes\n- Using conventional HTTP verbs\n- Setting common HTTP headers\n- rendering JSON from express\n- Following the RESTful routes convention\n\n##### During this phase you should…\n\n- initialize a node `package.json`\n- use `express`\n- use a JSON body parser\n- NOT use any other node packages\n\n##### Specs\n\n- [ ] Each mathematical operation should have it's own API endpoint\n- [ ] Each mathematical operation is done on the server\n- [ ] Each request for a mathematical operation is a `post` request\n- [ ] Each operation request responds with `JSON`\n- [ ] When the calculator is waiting for an operation request response, it ignores all input\n\n### Stage 5\n\nIn stage 5 you are going to add persistence to your express server. We're going to be persisting the history of the users calculations. We're also going back to just having one calculator on the page.\n\n![calculator-with-history](https://cloud.githubusercontent.com/assets/8385/22572149/9be3c83e-e957-11e6-9431-9b9742b6b4af.png)\n\n##### In this stage you will be using at least the following skills:\n\n- SQL schema design\n- writing SQL queries\n\n##### During this phase you should…\n\n- use the `pg`, `pg-promise`, and/or `knex` packages\n- NOT use any other node packages\n- create a `visitors` table\n- create a `calculations` table\n- persist each mathematical operations\n\n##### Specs\n\n- [ ] there is only one calculator on the page\n- [ ] the calculator displays a scrolling history of calculations\n- [ ] the most recent calculation result is at the bottom\n- [ ] the scroll-back history is always scrolled to the bottom when a new operation result is added\n- [ ] the calculator history is stored per visitor (browser)\n- [ ] the express app uses a cookie to track individual visitors\n- [ ] reloading the page restores the calculator history\n- [ ] the server stores up to 100 calculation results\n- [ ] all mathematical operations have their own function, defined outside of any express router handlers.\n\n### Required\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n[mac-calculator-clone]: https://github.com/GuildCrafts/mac-calculator-clone\n[readme]: https://github.com/GuildCrafts/mac-calculator-clone/blob/master/README.md\n"},{"authors":["@shereefb"],"issueNumber":165,"teamSize":1,"content":"\n# Core Object Oriented Javascript\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write correct JavaScript and understand its syntax\n- Can read and write JavaScript control structures, basic functions, and data types\n- Are interested in JavaScript scopes and closures\n- Are interested in the `this` keyword in JavaScript\n- Are interested in prototype delegation and inheritance\n- Are interested in code reuse\n\n## Description\n\nA day-by-day structured deep dive into object-oriented JavaScript. Read articles, watch videos, complete lessons and exercises, and implement a final project.\n\nThis goal makes heavy use of external resources: the [Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015) course on [Udacity](https://www.udacity.com/), books like [Eloquent JavaScript](http://eloquentjavascript.net), and various [video tutorials](https://www.youtube.com/watch?v=O8wwnhdkPE4).\n\nFork the the [core-object-oriented-javascript repository][core-oojs] and use the fork as your project artifact.\n\nIn the [README.md][core-oojs-readme] you'll find that this goal is broken down into daily objectives and tasks in order to support you in pacing yourself. There are a ton of stretch goals at the end, so make sure to go with the recommended pace, or faster to get the most out of it.\n\n## Context\n\nWhile JavaScript is not a strictly object-oriented language, it does have lots of interesting object-oriented features.\n\nBecoming a fluent JS developer means having an intimate knowledge with the particularities of the JS object model, with things like `this` and constructor functions and prototypes... It's a different way of structuring code from the classical model.\n\nChoose this goal if you've wondered how objects work in JavaScript and are looking to immerse yourself in an intensive and highly structured study.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [core-oojs][core-oojs] repo.\n- [ ] All readings and videos in the `README` are completed and checked off.\n- [ ] All exercises and lessons in the `README` are completed and checked off.\n- [ ] Final project is complete.\n- [ ] Final project code is in the `Frogger` directory of the artifact.\n\n\n### Stretch\n\n- [ ] All stretch tasks in the `README` are completed.\n\n## Quality Rubric\n\n**Clean code and commit messages**\n- Code is well formatted with proper spacing and indentation. [20 points]\n- Descriptive, well-named functions, variables, files, CSS classes, etc. [20 points]\n- Commit messages are concise and descriptive. [20 points]\n\n*Note: Make sure to checkoff your progress and push your repo to github at least twice a day.*\n\n**Follows object-oriented principles**\n- Final project follows the [principle of coupling][principle-coupling], also known as \"separation of concerns\". [20 points]\n- Final project follows the [principle of encapsulation][principle-encapsulation]. [20 points]\n- Final project follows the [principle of abstraction][principle-abstraction]\n- Final project follows the [principle of inheritance][principle-inheritance]\n\n[core-oojs]: https://github.com/GuildCrafts/core-object-oriented-javascript\n[core-oojs-readme]: https://github.com/GuildCrafts/core-object-oriented-javascript/blob/master/README.md\n[principle-encapsulation]: https://gamedevelopment.tutsplus.com/tutorials/quick-tip-the-oop-principle-of-encapsulation--gamedev-2187\n[principle-abstraction]: https://gamedevelopment.tutsplus.com/tutorials/quick-tip-the-oop-principle-of-abstraction--gamedev-2386\n[principle-inheritance]: https://gamedevelopment.tutsplus.com/tutorials/quick-tip-the-oop-principle-of-inheritance--gamedev-2536\n[principle-coupling]: https://gamedevelopment.tutsplus.com/tutorials/quick-tip-the-oop-principle-of-coupling--gamedev-1935\n"},{"authors":["@shereefb"],"issueNumber":174,"teamSize":1,"content":"\n# Core Vanilla Javascript [Solo Study]\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can open, edit, and save files with a text editor\n- Can use a web browser to search, explore, and consume content from the Internet\n- Are familiar with the concept of programs as instructions for a computer\n- Are beginning to write correct JavaScript and understand its syntax\n- Are getting started reading and writing JavaScript control structures, basic functions, and data types\n- Are interested in strengthening your knowledge of and fluency with JavaScript\n\n## Description\n\nA day-by-day structured deep dive into the basics of JavaScript. Read articles, watch videos, complete lessons and exercises.\n\nThis goal makes heavy use of external resources: the [JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804) course on [Udacity](https://www.udacity.com/), books like [Eloquent JavaScript](http://eloquentjavascript.net), and various video tutorials.\n\nFork the the [core-vanilla-javascript repository][core-vjs] and use the fork as your project artifact.\n\nIn the [solo_study.md][core-vjs-solo] you'll find that this goal is broken down into daily objectives and tasks in order to support you in pacing yourself. There are a ton of stretch goals at the end, so make sure to go with the recommended pace or faster to get the most out of it.\n\n## Context\n\nBefore getting started building web applications, it's important to get a grounding into the basics of programming and JavaScript. Becoming a full stack web developer means that you need to be comfortable with the core language first, before using it in the web stack.\n\nChoose this goal if you're just getting started with the basics of JavaScript and programming and want to gain a solid foothold. This will be an immersive, intensive, and highly structured study.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [core-vjs][core-vjs] repo.\n- [ ] All readings and videos in the `solo_study.md` file are completed and checked off.\n- [ ] All exercises and lessons in the `solo_study.md` file are completed and checked off.\n- [ ] Final project is complete and in the proper directory of the artifact.\n\n\n### Stretch\n\n- [ ] All stretch tasks in the `solo_study.md` are completed.\n\n## Quality Rubric\n\n**Clean code and commit messages**\n- Code is well formatted with proper spacing and indentation. [40 points]\n- Descriptive, well-named functions, variables, files, CSS classes, etc. [40 points]\n- Commit messages are concise and descriptive. [20 points]\n\n[core-vjs]: https://github.com/GuildCrafts/core-vanilla-javascript\n[core-vjs-solo]: https://github.com/GuildCrafts/core-vanilla-javascript/blob/master/solo_study.md\n"},{"authors":["@shereefb"],"issueNumber":176,"teamSize":2,"content":"\n# Core Vanilla Javascript [Team Drills & Practice]\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can open, edit, and save files with a text editor\n- Can use a web browser to search, explore, and consume content from the Internet\n- Are familiar with the concept of programs as instructions for a computer\n- Are beginning to write correct JavaScript and understand its syntax\n- Are getting started reading and writing JavaScript control structures, basic functions, and data types\n- Are interested in strengthening your knowledge of and fluency with JavaScript\n\n## Description\n\nA day-by-day structured set of challenges to be completed in team.\n\nThe final 2 days consist of a final project that demands and develops all your JavaScript foundational skills and stretches problem solving skills.\n\nFork the the [core-vanilla-javascript repository][core-vjs] and use the fork as your project artifact.\n\nIn the [team_practice.md][core-vjs-team] you'll find that this goal is broken down into daily objectives and tasks in order to support you in pacing yourself. There are a ton of stretch goals at the end, so make sure to go with the recommended pace or faster to get the most out of it.\n\n## Context\n\nBefore getting started building web applications, it's important to get a grounding into the basics of programming and JavaScript. Becoming a full stack web developer means that you need to be comfortable with the core language first, before using it in the web stack.\n\nChoose this goal if you're just getting started with the basics of JavaScript and programming and want to gain a solid foothold. This will be an immersive, intensive, and highly structured study.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [core-vjs][core-vjs] repo.\n- [ ] All readings and videos in the [team_practice.md][core-vjs-team] are completed and checked off.\n- [ ] All exercises and lessons in the [team_practice.md][core-vjs-team] are completed and checked off.\n- [ ] Final project is complete and in the proper directory of the artifact.\n\n_Note: Make sure to check off your progress and push your repo to GitHub at least twice a day._\n\n### Stretch\n\n- [ ] All stretch tasks in the [team_practice.md][core-vjs-team] are completed.\n\n## Quality Rubric\n\n**Clean code and commit messages**\n- Code is well formatted with proper spacing and indentation. [40 points]\n- Descriptive, well-named functions, variables, files, CSS classes, etc. [40 points]\n- Commit messages are concise and descriptive. [20 points]\n\n[core-vjs]: https://github.com/GuildCrafts/core-object-oriented-javascript\n[core-vjs-team]: https://github.com/GuildCrafts/core-object-oriented-javascript/blob/master/team_practice.md\n"},{"authors":["@deadlyicon"],"teamSize":2,"issueNumber":76,"content":"\n# Work on Trossello\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications with Node.js and npm\n- Can write feature-complete, fully tested, quality code\n- Can debug programs in both client- and server-side environments\n- Have worked with teams to deploy web apps\n- Are familiar with the GitHub project management tools\n- Are interested in open-source web development\n- Are interested in collaborating on a living codebase\n\n## Description\n\nBuild an open-source clone of [Trello](https://trello.com/).\n\nTrossello is an ongoing project with a live app. You will be working in a [living codebase](https://github.com/GuildCrafts/Trossello/commits/master) on [real issues](https://github.com/GuildCrafts/Trossello/issues) with [other developers](https://github.com/GuildCrafts/Trossello/graphs/contributors).\n\nWhen you join Trossello, you will select or be assigned issues to work on for the week. Be ready to jump in and contribute!\n\nRepo: https://github.com/GuildCrafts/Trossello/\n\nFurther details about how the team is run can be in [this gist](https://gist.github.com/deadlyicon/cb7dfbc3b2a7df93b2a20daf8f015b57).\n\n## Context\n\nYou will work as if you were on a professional software development team.\n\n- You'll be working on a large pre-existing code base\n- Your work might be deployed to an actual production environment\n- All changes are accepted or rejected by the project lead via Github pull requests\n- The tasks available to work on are locked in by the project lead\n- You'll write tests for everything\n- You'll test your changes on a staging environment\n- You'll need to read a lot more code than you'll write\n\n### Skills\n\nSome of the skills you'll likely be practicing if you choose this goal:\n\n- Git / Github\n  - forking a repository\n  - making pull requests\n  - managing multiple remotes\n  - rebasing off a remote branch\n  - rebasing to polish a pull request\n  - resolving merge conflicts\n  - when to use and not to use `git push --force`\n  - how to write a good commit message\n  - knowing what you're committing with `git add --patch`\n- JavaScript\n  - The `this` keyword\n  - Callbacks and Promises\n  - AJAX / XHR\n  - React Components as ES6 classes\n  - ES6 Syntax\n  - Testing with Mocha & Chai\n- Node\n  - NPM\n    - `scripts` section of the `package.json`\n  - Express\n    - writing API routes that recieve and render JSON\n  - Knex SQL node package\n  - ES6 Import / Export\n  - using babel to transpile ES6 -> ES5\n  - using webpack to package JavaScript for the web\n- Web / HTTP\n  - HTTP requests (GET, POST, post body, rendering json)\n  - Deploying to Heroku\n  - Auth via an encrupted session cookie\n  - OAuth with Github\n- UNIX\n  - Environment variables\n  - Creating and running executable files\n- Basic SASS / CSS\n- Basic SQL\n  - schema design\n  - schema migrations\n  - selects, joins, indexes\n- User Stories\n\n## Specifications\n\nRead the [README](https://github.com/GuildCrafts/Trossello/blob/master/README.md) to learn how to contribute and what the current tickets are.\n\n## Quality Rubric\n\nQuality requirements will be determined by your project lead.\n"},{"authors":["@Moniarchy"],"teamSize":2,"issueNumber":77,"content":"\n# Work on Floworky\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build full-stack web applications with Node.js and npm\n- Can write feature-complete, fully tested, quality code\n- Can debug programs in both client- and server-side environments\n- Have worked with teams to deploy web apps\n- Are familiar with the GitHub project management tools\n- Are interested in open-source web development\n- Are interested in collaborating on a living codebase\n\n## Description\n\nBuild an open source clone of [workflowy](https://workflowy.com/).\n\nFloworky is an ongoing project with a live app. You will be working in a [living codebase](https://github.com/GuildCrafts/floworky/commits/master) on [real issues](https://github.com/GuildCrafts/floworky/issues) with [other developers](https://github.com/GuildCrafts/floworky/graphs/contributors).\n\nWhen you join Floworky, you will select or be assigned issues to work on for the week. Be ready to jump in and contribute!\n\nRepo: https://github.com/GuildCrafts/floworky/\n<br>Contibuting: https://github.com/GuildCrafts/floworky/blob/master/CONTRIBUTING.md\n\n## Context\n\nWorking on this codebase will expose you to some of the patterns and activities of a real software development team.\n\nYou'll be expected to commit clean, functional, well-written code on time. Every change will be reviewed. Be ready to adapt to changing circumstances and new challenges.\n\n## Specifications\n\nSpecifications and requirements will come from the issues tracked in the [repo project](https://github.com/GuildCrafts/floworky/projects/2).\n\n## Quality Rubric\n\nSee quality rubric in the project's [CONTRIBUTING](https://github.com/GuildCrafts/floworky/blob/master/CONTRIBUTING.md) file.\n"},{"authors":["@shereefb"],"teamSize":1,"issueNumber":83,"content":"\n# Browser Games [Basic]\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build basic web sites with HTML & CSS\n- Can add behavior to a web site with JavaScript\n- Are familiar with DOM manipulation\n- Are familiar with games like tic-tac-toe and Simon\n- Are interested in making more complex interactive web pages\n\n## Description\n\nBuild simple graphical games for the browser.\n\nFork the the [browser-games repository][browser-games] and use the fork as your project artifact.\n\nImplement the games **Tic-Tac-Toe** and **Simon** from the list in the [games.md][games-list] file.\n\nYou will be using FreeCodeCamp challenges as guides and tutorials for building these games.\n\n## Context\n\nThis goal will challenge your ability to take a _formal, defined system_ from the real world and replicate it in code. You will start with all of the logic of the system (the rules of the game) and most of the UI already designed.\n\nYour work will be mainly in deciding how to replicate that formal logic and user interface using JavaScript, HTML, and CSS.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [browser-games][browser-games] repo.\n- [ ] For **both** of the games Tic-Tac-Toe and Simon, there exists:\n  - [ ] A playable, complete version of the game at `public/GAME_NAME.html` (e.g. `public/ticTacToe.html`)\n  - [ ] A link to the game page from `public/index.html`\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n## Quality Rubric\n\n**Good code style**\n- HTML, CSS, and JS files are well formatted with proper spacing and indentation. [50 points]\n- Descriptive, well-named functions, variables, files, CSS classes, etc. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[browser-games]: https://github.com/GuildCrafts/browser-games\n[games-list]: https://github.com/GuildCrafts/browser-games/blob/master/games.md\n[basic-games]: https://github.com/GuildCrafts/browser-games/blob/master/games.md#basic-graphical-games\n"}]}