{"section":"Backend","groups":[{"group":"API","levels":[{"level":0,"description":"understand API documentation and write code that consumes it"},{"level":1,"description":"Understands and is able to design a basic API and consume it"},{"level":2,"description":"Understands the ins and outs of great API design"},{"level":3,"description":"Experience with service oriented architecture design and implementation"}]},{"group":"Continuous Deployment","levels":[{"level":0,"description":"build a script that compiles the code for production"},{"level":1,"description":"Code is automatically built and tested through a CI server"},{"level":2,"description":"Configuration AND environment (Docker) is managed, functional AND nonfunctional (capacity) tests are automatically run"},{"level":3,"description":"N-tier archicture deployments are orchestrated (ansible, kubernetes) into a cloud-based environment, push-button deployment and other tools from an admin page"}]},{"group":"Database","levels":[{"level":0,"description":"Good relational Design, postgres & SQL basics, normalization, ACID. Can write basic read/write queries. "},{"level":1,"description":"ORM or patterns, migrations, can write more complex queries (joins, subqueries, etc.). Able to design good and normalized database schemas keeping in mind the queries that'll have to be run. "},{"level":2,"description":"document vs relational, uses transactions, basic knowledge of multiple techs (mongo, postgresql, elasticsearch, etc.). Proficient in use of views, stored procedures, triggers and user defined types. Knows difference between clustered and non-clustered indexes. "},{"level":3,"description":"In-depth knowledge of multiple techs (mongo, postgresql, elasticsearch, etc.). db mgmt and devops. db internals."}]},{"group":"HTTP","levels":[{"level":0,"description":"Basic codes, headers, post/get, URL, and parsing"},{"level":1,"description":"redirects, cookies, authentication, put/patch/delete, error codes"},{"level":2,"description":"CORS, advanced headers, web sockets"},{"level":3,"description":"Load balancing, eTag, reverse proxy caching"}]},{"group":"Node","levels":[{"level":0,"description":"Basic npm, Basic HTTP server (kow/express), aware of basic API methods"},{"level":1,"description":"Difference between sync and async functions, middleware, basic authentication, basic security"},{"level":2,"description":"Integrations with other services, SSO, SSR"},{"level":3,"description":"compilation/es6/async functions, security audits"}]},{"group":"Security","levels":[{"level":0,"description":""},{"level":1,"description":"Cleans requests from API"},{"level":2,"description":"Defends against CSRF and XSS, can set up SSL certs"},{"level":3,"description":"Defends against brute-force/DDoS attacks"}]},{"group":"Web Application Architecture","levels":[{"level":0,"description":"Basic web architecture. HTTP servers, static assets, templates, cookies, HTTP status, ports"},{"level":1,"description":"Authorization, asset managers, sockets, REST, API"},{"level":2,"description":"MVC, client side rendering and error handling"},{"level":3,"description":"Helpers, OAuth, caching, security, config files, HTTPS, Service-Oriented Architecture"}]}]}