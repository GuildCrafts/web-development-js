{
  "title": "Blackjack Game in the Shell with Node.js",
  "authors": [
    "phoniks",
    "DianaVashti"
  ],
  "team_size": 2,
  "goal_id": 68,
  "created_at": "2017-04-24T09:34:55Z",
  "labels": [
    "games",
    "console",
    "JavaScript basics"
  ],
  "level": "1",
  "published": true,
  "redirect_from": "/goals/68",
  "url": "http://jsdev.learnersguild.org/goals/68-Blackjack_Game_in_the_Shell_with_Node.html",
  "base_xp": 100,
  "bonus_xp": 15.0,
  "dynamic": false,
  "content": "# Blackjack Game in the Shell with Node.js\n\n## Challenge Rating\n\nThis will be a good goal for someone who is fairly new to vanilla JavaScript and wants to practice their algorithm scripting, logic, and syntax while building a game that runs entirely in the terminal/shell. This goal does not require any HTML, CSS, routes, or a database, just a text editor and your pure JavaScript skills.\n\nThis goal will likely be within your ZPD if you...\n\n- Still feel unable to create full stack applications because your vanilla JS needs to be stronger.\n- Have written stand-alone algorithms (such as isPalindrone etc..) but want a goal where all your logic is connected in the form of a game.\n\nTo complete this goal you will need to:\n- Write JavaScript Functions\n- Use git and github\n- Work with various JS object prototypes like strings, arrays and/or object literals\n- Use modules to export/import your functions between different files\n- Use loops and possibly JS classes\n- Create your own repo, initialize your project, and add dependencies to your package.json\n\n\n## Description\n\nThe goal for this project is to create a playable blackjack game that is run in the terminal/shell (using `npm run start`, or a similar terminal/shell command). There is no front or back end for this project, simply game logic and the JavaScript to execute said logic. You will use read-line sync or a similar dependency of your choosing to aid in the play interactions but otherwise this project only requires vanilla JavaScript, your preferred text editor, and your terminal/shell. Feel free to add additional dependencies to make your game unique but the core of this goal is to deep dive in to JavaScript basics. At the end of this goal you should have practiced a large amount of JavaScript built in functions, file system structuring, & importing and exporting modules.\n\nA few questions to consider as you work on this project:\n- Are my functions each serving the minimal purpose I can achieve (example: Instead of a function that contains the logic to shuffle a deck and deal the cards, those should be two separate functions where the deal function takes the shuffle functions return as it's input.)\n- When I have functions that rely on each other are they always returning the same output given the same input (i.e. are they pure functions?). It may not be possible for EVERY function to be pure but you should optimize for it in every case possible.\n- Given the limitations of printing/logging to the terminal/shell, how can I improve the user experience with dependencies (example: the 'colors' npm package lets you colorize your terminal/shell text.)\n- Does the way I have structured my filesystem make sense (example: Do functions that deal with the concept of a card object all live in the same file? Do the functions that deal with determining the winner of a round live in a separate file from the card object constructor? They should.) Are my files and functions organized in a way in which I will be able to piece them all together and the logic will be easy to follow by another developer?\n\n## Context\n\nThis goal provides a great chance to spend a whole week working with only .js files and JS code while also making a whole game. If tutorials don't work for you because you need to be building something, this is a great chance to combine JavaScript basics, algorithm logic & scripting, and file structuring as a precursor to full-stack app crafting.\n\n## Specifications\n\n- [ ] There is a README that includes directions for how to access, initialize, and run your game in the terminal/shell.\n- [ ] The file system is separated in to different files, and the separation is logical. (example: The code for how to shuffle a deck should live in a different place than the code for the logic in how the dealer behaves.)\n- [ ] Functions are concise and specific, and named in a way that is friendly to the reviewer / other learners.\n\nThe end product is a playable blackjack game:\n- [ ] The game is playable as one player and one dealer (AI)\n- [ ] The player has a bank, and can continue playing rounds until they quit or are out of bankroll.\n- [ ] The game tracks the bets, outcomes, and bank.\n- [ ] The dealer/house has unlimited funds.\n- [ ] The player can only see one of the dealers two cards during their turn.\n- [ ] The dealer takes their actions after the user.\n- [ ] The dealer gets to go second and will always try and win. (If you don't bust the dealer will hit until they win or bust.)\n- [ ] An Ace is worth 11 unless it would put the player over 21, in which it becomes worth 1. This is still true for multiple Ace's (Example: A♠︎, A♣️, 9♦️ => 1, 11, 9 => 21)\n- [ ] There is an exit command to terminate the game.\n- [ ] The game does not allow you to bet more than you have.\n- [ ] Each round begins by showing you your current bankroll, and you can bet as much or as little of that total as you wish.\n- [ ] The house pays out on a 1:1 profit on wins (example: If you have $10, bet it all, and win, you now have $20)\n- [ ] The game observes only the basic rules of blackjack: Natural blackjacks, ties lead to re-deals with the same bet, basic hit or stay abilities. Do not worry about more complex rules like doubling-down or splits.\n- [ ] The artifact for the project is set and the readME includes the: Team name, goal number, team member handles, and a brief description of how to play your game (example: What is the command to quit, start, hit, or stay?)\n\n### Stretch\n- [ ] The game supports multiple user-players.\n- [ ] The dealer AI considers all players in multi-player format when executing their logic.\n- [ ] There is a multiplayer format without a dealer ( player vs. player: Game ends when one player is out of bankroll )\n- [ ] The payout on a natural blackjack is 3:2 instead of 1:1\n\nHere is an example of how one round of your game might look in your repo (The demo version used a bank that has both money and objects as payroll. What will you do to make your version unique? Have fun with it!):\n\n![screenshot1](https://cloud.githubusercontent.com/assets/19767738/25509217/2ddaa572-2b6c-11e7-8001-3a4412d3b093.png)\n\n## Resources\n#### Here are 4 different options for adding user prompts to your commandline:\nReadline-sync: https://www.npmjs.com/package/readline-sync\nReadline: https://www.npmjs.com/package/readline\nInquirer: https://www.npmjs.com/package/inquirer\nQuestions: https://www.npmjs.com/package/questions\n\n#### Here's a package for adding some style and color to your terminal/shell:\nColors (for making things in your terminal colorful): https://www.npmjs.com/package/colors\n\n#### Here are the basics of the game of blackjack:\nThe basics of blackjack strategy: http://www.hitorstand.net/strategy.php"
}