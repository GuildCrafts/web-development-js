{
  "authors": [
    "tannerwelsh"
  ],
  "goal_id": 158,
  "team_size": 1,
  "title": "Core Algorithms [Classic, Numeric, and Set]",
  "created_at": "2016-12-31T16:12:46Z",
  "labels": [
    "core"
  ],
  "published": true,
  "level": "1",
  "redirect_from": "/goals/158",
  "url": "http://jsdev.learnersguild.org/goals/158-Core_Algorithms-Classic_Numeric_and_Set.html",
  "xp_value": 50,
  "dynamic": false,
  "content": "# Core Algorithms [Classic, Numeric, and Set]\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can use problem decomposition to split difficult problems into smaller parts\n- Have used pseudocode as an intermediary step in writing a program\n- Are interested in common computer science algorithms\n- Are interested in critical thinking and problem solving\n\n## Description\n\nThis is a sub-goal of [Core Algorithms][core-algos]. Reference that goal for more description, context, and resources.\n\nComplete **ONLY** the [Classic](https://github.com/GuildCrafts/core-algorithms/blob/master/algorithms.md#classic), [Numeric](https://github.com/GuildCrafts/core-algorithms/blob/master/algorithms.md#numeric), and [Set Operations](https://github.com/GuildCrafts/core-algorithms/blob/master/algorithms.md#set-operations) algorithms, not the Sorting/Searching or Graphing/Geometry. That's a [separate goal][core-algos-adv]. :)\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [core-algorithms][core-algorithms] repo.\n- [ ] Can run all tests with `npm test`.\n- [ ] `makeChange()` algorithm is correctly implemented.\n- [ ] Tests for `makeChange()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `fizzBuzz()` algorithm is correctly implemented.\n- [ ] Tests for `fizzBuzz()` exist.\n- [ ] `isPalindrome()` algorithm is correctly implemented.\n- [ ] Tests for `isPalindrome()` exist with at least 2 unit tests using valid inputs.\n- [ ] `factorial()` algorithm is correctly implemented.\n- [ ] Tests for `factorial()` exist with at least 2 unit tests using valid inputs.\n- [ ] `fibonacci()` algorithm is correctly implemented.\n- [ ] Tests for `fibonacci()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `collatzConjecture()` algorithm is correctly implemented.\n- [ ] Tests for `collatzConjecture()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `setUnion()` algorithm is correctly implemented.\n- [ ] Tests for `setUnion()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `setIntersection()` algorithm is correctly implemented.\n- [ ] Tests for `setIntersection()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `setComplement()` algorithm is correctly implemented.\n- [ ] Tests for `setComplement()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `setSymmetricDifference()` algorithm is correctly implemented.\n- [ ] Tests for `setSymmetricDifference()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] Repository includes a README file with basic installation and setup instructions.\n- [ ] All dependencies are properly declared in `package.json`.\n- [ ] All major features are added via pull requests with a clear description and concise commit messages.\n- [ ] Code uses a linter and there are no linting errors.\n- [ ] Variables, functions, files, etc. have appropriate and meaningful names.\n- [ ] Functions are small and serve a single purpose.\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nPick a _different_ programming language from JavaScript (e.g. Ruby, Swift, Python, C, Java...) and write tests & implementations for each.\n\n- [ ] Can run all non-JavaScript tests with a single command.\n- [ ] For each algorithm identified above, there exists:\n  - [ ] a test file with multiple unit tests for each algorithm  _in a language other than JavaScript_.\n  - [ ] an implementation file with a correct implementation of the algorithm _in a language other than JavaScript_.\n\n\n[core-algos]: {{ site.url }}{% link _goals/123-Core_Algorithms.md %}\n[core-algos-adv]: {{ site.url }}{% link _goals/159-Core_Algorithms-Sorting_Searching_Graphing_and_Geometry.md %}"
}