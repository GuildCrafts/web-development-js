{
  "authors": [
    "tannerwelsh"
  ],
  "team_size": 2,
  "goal_id": 252,
  "title": "Init 6: OOP Practice with Bike Shop",
  "created_at": "2017-04-04T10:00:00Z",
  "labels": [
    "practice",
    "foundational"
  ],
  "published": true,
  "level": "0",
  "base_xp": 60,
  "bonus_xp": 25,
  "redirect_from": "/goals/252",
  "url": "https://jsdev.learnersguild.org/goals/252-Init_6-OOP_Practice_with_Bike_Shop.html",
  "dynamic": false,
  "content": "# Init 6: OOP Practice with Bike Shop\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can use fundamental programming contructs: variables, conditionals, loops, data types, functions\n- Can write basic JavaScript and execute it in a browser environment\n- Have completed the [first initiation goal][bossggle-word-game] (or something similar)\n- Have used git and GitHub to do basic tasks like forking, cloning, making commits, and pushing to a remote repository\n- Are interested in growing your JavaScript skills\n- Are interested in learning to write well-structured code using the principles of object-oriented programming\n\n## Description\n\n[Object-oriented programming][wiki-oop] (OOP) is a way of writing and organizing code. It has been around for a _long_ time (by software standards) and is a useful and proven way to design readable, reasonable software.\n\nIn this goal, you'll work with your team on a series of JavaScript exercises in the [oop-practice][] repo that focus on core OOP concepts, patterns, and principles.\n\nThis goal makes extensive use of the tutorials and exercises on [JavaScript.info](http://javascript.info/), especially those in the [Objects, classes, inheritance](http://javascript.info/object-oriented-programming) section. It is _highly recommended_ that you make use of this resource, even beyond what is explicitly stated in the specs.\n\n### Recommended Pace\n\nIt is recommended (but not required) that you follow along with the day-by-day pace included here. These are designed to help you break down the problem into more manageable parts so that you can pace your work appropriately.\n\nEach day, pay attention to the **terms & concepts** highlighed in **bold**. By the end of the day, you should have a better idea of what they mean and how to use them. In other words, aim to be able to answer the question \"what is X?\" for yourself.\n\nIf you work thorugh a full day and have time left over:\n\n- Solidify your learning with the [resources](#resources) provided or\n- Start on the next day with your team or\n- Attempt the [stretch](#stretch) specs\n\n#### Day 1\n\nFork the [oop-practice][] repo into your own GitHub account. Each team member should write code in their own fork, but you should work together and share ideas and solutions as you go.\n\nWith your team, complete the specs in [Stage 1](#stage-1) to practice working with **objects** and learn about **key/value** pairs, **object literals**, and **nested objects**.\n\n#### Day 2\n\nComplete the specs in [Stage 2](#stage-2) to practice working with **constructor functions** and the **\"new\" keyword**, and to learn about object **properties**, **instances** and **instantiation**, and the **\"this\" keyword**.\n\nTo make sure that you are getting enough challenge, spend the morning working solo on the JavaScript.info exercises and then use the afternoon to work in team on the `bike-shop`.\n\n#### Day 3\n\nComplete the specs in [Stage 3](#stage-3) to practice working with **methods** and the **class pattern**, and to learn about **prototypal inheritance**, **getter/setter methods**, and the **\"__proto__\" property**.\n\nDepending on how much support you and your team need, balance solo and team time. Make sure to always review the day's work with your team and share important learnings.\n\n#### Day 4\n\nComplete the specs in [Stage 4](#stage-4) to practice working with **classes** and **classical inheritance**, and to learn about the **\"class\"**, **\"extends\"** and **\"super\"** keywords in JavaScript.\n\nDepending on how much support you and your team need, balance solo and team time. Make sure to always review the day's work with your team and share important learnings.\n\n#### Day 5\n\nWith your team, complete the specs in [Stage 5](#stage-5) to challenge and practice everything that you've learned so far.\n\nTake your object-oriented skills into a new domain to put them to the test. Instead of working against a set of clearly defined specs, you'll have to come up with your own **object model** for a system of your choice.\n\nA big part of object-oriented programming is taking the specs for a product and figuring out what kinds of **objects** will be needed to implement the desired behavior. Among other things, you'll need to design the classes, their instance methods and properties, and the relationships between objects.\n\n## Context\n\nThe series of initiation goals are designed for new members of Learners Guild to get oriented to the learning environment, build key foundational skills, and work on some fun projects.\n\n1. [Init 1: Bossggle Word Game][bossggle-word-game]\n1. [Init 2: Developer Tools][developer-tools]\n1. [Init 3: Hello Web Servers][hello-web-servers]\n1. [Init 4: Relational Databases][relational-databases]\n1. [Init 5: Web APIs][web-apis]\n1. [Init 6: OOP Practice with Bike Shop][bike-shop-oop]\n\nBy the time you are finished with these initiation goals, you should be skilled enough to complete the [Simple Book Store][simple-book-store] goal: it is a good target for you to aim for in your first 6 weeks.\n\nThis is the final goal in the series! Congratulations! You've made it through quite a lot. Once you've finished this goal, you'll have built a solid foundation of essential skills that you'll build upon as you continue learning JavaScript web development.\n\nThis goal is designed to introduce you to objects and [object-oriented programming][wiki-oop] in JavaScript (...and also to the [Node.js][nodejs] programming environment, indirectly).\n\nBy the time you're done with this goal, you will have:\n\n- Modeled a bike shop using object-oriented JavaScript\n- Worked through 10+ exercises to challenge your OOP knowledge\n- Applied your newfound knowledge to design an object model for a system of your choice\n\n## Specifications\n\nThese are the basic specs for OOP Practice, broken into 5 stages. If you complete these specs, try taking on some of the [Stretch specs](#stretch).\n\n#### Stage 1\n\nTo get started, each team member needs to fork the [oop-practice][] repo. Then, create a [gist](https://gist.github.com/) and add links to each fork to a file in the gist. This is your `artifact`.\n\n- [ ] Artifact is set to a gist with links to each of your teammate's forks.\n\nSolutions exist in the `jsinfo/` folder for the following exercises from the [\"Objects\" tutorial on JavaScript.info](http://javascript.info/object):\n- [ ] [Hello, object](http://javascript.info/object#hello-object)\n- [ ] [Multiply numeric properties by 2](http://javascript.info/object#multiply-numeric-properties-by-2)\n\nSolutions exist in the `jsinfo/` folder for the following exercises from the [\"Object methods, 'this'\" tutorial on JavaScript.info](http://javascript.info/object-methods):\n- [ ] [Create a calculator](http://javascript.info/object-methods#create-a-calculator)\n- [ ] [Chaining](http://javascript.info/object-methods#chaining)\n\nWork on `bike-shop` to pass the tests\n- [ ] All stage 1 tests in the `bike-shop` are passing with source code written in `bike-shop/src/stage1-literals.js`.\n\n#### Stage 2\n\nSolutions exist in the `jsinfo/` folder for the following exercises from the [\"Constructor, operator 'new'\" tutorial on JavaScript.info](http://javascript.info/constructor-new):\n- [ ] [Create new Calculator](http://javascript.info/constructor-new#create-new-calculator)\n- [ ] [Create new Accumulator](http://javascript.info/constructor-new#create-new-accumulator)\n- [ ] [Create an extendable calculator](http://javascript.info/constructor-new#create-an-extendable-calculator)\n\nWork on `bike-shop` to pass the tests\n- [ ] All stage 2 tests in the `bike-shop` are passing with source code written in `bike-shop/src/stage2-constructors.js`.\n\n#### Stage 3\n\nSolutions exist in the `jsinfo/` folder for the following exercises from the [\"Prototypal inheritance\" tutorial on JavaScript.info](http://javascript.info/prototype-inheritance):\n- [ ] [Searching algorithm](http://javascript.info/prototype-inheritance#searching-algorithm)\n- [ ] [Why two hamsters are full?](http://javascript.info/prototype-inheritance#why-two-hamsters-are-full)\n\nSolutions exist in the `jsinfo/` folder for the following exercises from the [\"Class patterns\" tutorial on JavaScript.info](http://javascript.info/class-patterns):\n- [ ] [An error in the inheritance](http://javascript.info/class-patterns#an-error-in-the-inheritance)\n- [ ] [Rewrite to prototypes](http://javascript.info/class-patterns#rewrite-to-prototypes)\n\nWork on `bike-shop` to pass the tests\n- [ ] All stage 3 tests in the `bike-shop` are passing with source code written in `bike-shop/src/stage3-methods.js`.\n\n#### Stage 4\n\nSolutions exist in the `jsinfo/` folder for the following exercises from the [\"Classes\" tutorial on JavaScript.info](http://javascript.info/class):\n- [ ] [Rewrite to class](http://javascript.info/class#rewrite-to-class)\n\nSolutions exist in the `jsinfo/` folder for the following exercises from the [\"Class inheritance, super\" tutorial on JavaScript.info](http://javascript.info/class-inheritance):\n- [ ] [Error creating an instance](http://javascript.info/class-inheritance#error-creating-an-instance)\n- [ ] [Extended clock](http://javascript.info/class-inheritance#extended-clock)\n\nWork on `bike-shop` to pass the tests\n- [ ] All stage 4 tests in the `bike-shop` are passing with source code written in `bike-shop/src/stage4-inheritance.js`.\n\n#### Stage 5\n\nDesign a basic **object model** for a system of your choice. For example: an ecommerce system, or a blog, or a CMS, or a class registry at a gym, or an inventory application for a warehouse...\n\n- [ ] A new folder is used to store all of your JS code for the chosen object model.\n- [ ] The system uses at least 3 classes, each with their own instance methods and properties.\n\n### Stretch\n\nIf you complete all of the specs listed above (the checkboxes), there's no reason to stop there! Keep practicing with these stretch specs.\n\nWith these specs, you'll be building an **object-oriented version** of the [Bossggle word game][bossggle-word-game].\n\n- [ ] Bossggle game is copied into the artifact repo under a `bossggle` subdirectory\n- [ ] All JavaScript in Bossggle is rewritten to use an object-oriented style (for example, there is a `Game` class and a `Word` class, with instace methods like `Game#reset()` and `Word#isValid()`)\n- [ ] Bossggle game is still functional accordign to the core specs\n\n## Resources\n\nUse these resources to fill in the gaps in your skills and knowledge as you find them. There is more here than you can do in a week, so focus on the areas that are in your zone of proximal development (ZPD).\n\n##### Guides\n\n- MDN: [Introduction to Object Oriented JavaScript](https://developer.mozilla.org/ms/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript) #js #oop\n- MDN: [Object-oriented JavaScript for Beginners](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS) #js #oop\n- MDN: [Inheritance in JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance) #js #oop\n\n##### Courses\n\n- Treehouse: [Node.js Basics (2h)](https://teamtreehouse.com/library/nodejs-basics-2) #nodejs\n  - Only need to do the \"Introduction to Node.js\" section; the others are a bit superflous at this point\n- Treehouse: [npm Basics (76m)](https://teamtreehouse.com/library/npm-basics) #nodejs #npm\n- TreeHouse: [Object-Oriented JavaScript Course (134m)](https://teamtreehouse.com/library/objectoriented-javascript) #js #oop\n- Frontend Masters: [JavaScript: From Fundamentals to Functional JS (7h)](https://frontendmasters.com/courses/js-fundamentals-to-functional/) #js\n- Lynda: [Foundations of Programming: Object-Oriented Design (3h 1m)](https://www.lynda.com/Java-tutorials/Foundations-Programming-Object-Oriented-Design/96949-2.html) #oop\n\n##### Tutorials\n\n- [JavaScript.info](https://javascript.info/) #js\n  - [Objects: the basics](https://javascript.info/object-basics) #js #oop\n  - [Objects, classes, inheritance](https://javascript.info/object-oriented-programming) #js #oop\n\n##### Exercises\n\n- Exercism.io: [JavaScript Track](http://exercism.io/languages/javascript/about) #js\n- [JavaScript Koans](https://github.com/mrdavidlaing/javascript-koans) #js\n\n##### Videos\n\n- Shereef's OO JS videos: scroll to [\"OO JavaScript\" section](https://shereef.wistia.com/projects/fwy60ilf20) #js #oop\n- [Object Oriented JavaScript (1h)](https://www.youtube.com/watch?v=O8wwnhdkPE4) #js #oop\n\n##### Books\n\n- [Eloquent JavaScript](http://eloquentjavascript.net) #js\n  - Especially the Chapter on [Object-oriented Programming](http://eloquentjavascript.net/1st_edition/chapter8.html) #js #oop\n\n\n[oop-practice]: https://github.com/GuildCrafts/oop-practice/\n\n[simple-book-store]: {{ site.url }}{% link _goals/69-Simple_Book_Store.md %}\n\n[bossggle-word-game]: {{ site.url }}{% link _goals/251-Init_1-Bossggle_Word_Game.md %}\n[bike-shop-oop]: {{ site.url }}{% link _goals/252-Init_6-OOP_Practice_with_Bike_Shop.md %}\n[hello-web-servers]: {{ site.url }}{% link _goals/253-Init_3-Hello_Web_Servers.md %}\n[relational-databases]: {{ site.url }}{% link _goals/254-Init_4-Relational_Databases.md %}\n[web-apis]: {{ site.url }}{% link _goals/255-Init_5-Web_APIs.md %}\n[developer-tools]: {{ site.url }}{% link _goals/256-Init_2-Developer_Tools.md %}\n\n[nodejs]: https://nodejs.org/en/\n[wiki-oop]: https://en.wikipedia.org/wiki/Object-oriented_programming\n\n[mit-license]: https://opensource.org/licenses/MIT"
}