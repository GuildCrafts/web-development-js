{
  "authors": [
    "tannerwelsh"
  ],
  "goal_id": 126,
  "team_size": 2,
  "title": "MetroRail: Data Modeling & Database Design",
  "created_at": "2016-12-30T22:40:21Z",
  "labels": [
    "practice"
  ],
  "published": true,
  "level": "2",
  "redirect_from": "/goals/126",
  "url": "http://jsdev.learnersguild.org/goals/126-MetroRail-Data_Modeling.html",
  "content": "# MetroRail: Data Modeling & Database Design\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can build apps using Node.js and npm\n- Can create a relational database\n- Can perform basic operations on a relational database\n- Can interact with a relational database from JavaScript\n- Are familiar with ORM (Object-Relational Mapping)\n- Are interested in database schema design\n- Are interested in program interface design\n\n## Description\n\nBuild the data model and database for a city transit system.\n\nFork the [metrorail][metrorail-repo] starter repo to start your project.\n\nThis particular city has a simple transit system: just one circular train line with 12 stations and 4 trains.\n\nWhen complete, you'll have an API for working with at least 3 models with database persistence. You'll be able to write scripts that look like this (although they may not have exactly the same interface, this is just an example):\n\n```javascript\nconst Station = require('./models/station')\nconst Passenger = require('./models/passenger')\n\n// let's move a passenger \"Sam\" from the Downtown station to Waterfront...\nconst sam = Passenger.find({name: 'Sam'})\nconst downtown = Station.find({location: 'Downtown'})\nconst waterfront = Station.find({location: 'Waterfront'})\n\nsam.setStation(downtown)\nsam.buyTicket({to: waterfront})\n\nconst train = downtown.nextTrain()\ntrain.moveToNextStation()\ntrain.onboard()\n\nwhile (train.currentStation !== waterfront) {\n  train.moveToNextStation()\n}\n\ntrain.offboard()\nsam.currentStation\n// Sam is now at the Waterfront!\n```\n\nUse whichever database you prefer. However, it is recommended that you use a relational, open-source data store like PostgreSQL.\n\nTo help you get started with some seed data, here is a list of the train stations in this fictional city (they are along a circular line, so the station after `Museum Isle` is `Downtown`).\n\n```\n1. Downtown\n2. Elm Street\n3. Forest Gardens\n4. Annex\n5. 10th Ave\n6. Waterfront\n7. Colosseum\n8. Central Station\n9. Parkside\n10. Grand Boulevard\n11. Monument Valley\n12. Museum Isle\n```\n\nWhen you complete this goal, consider doing the next iteration: [MetroRail: Web API Design, Building, and Documentation][metrorail-web-api].\n\n## Context\n\nMost of software is a _model_ of some real-world system. It follows that being able to develop good models is a crucial skill.\n\nIn this case, the model is both one that should be familiar to anyone who has ever ridden public transit in a city. You also have very clear specifications to follow, so most of the guesswork has been taken out of the process.\n\nAs you build this project, you'll likely encounter questions such as:\n\n- Is this a property or a method?\n- If a method, is it a method of the instance or the class?\n- Where does this feature belong? If in a class, which class?\n- What are the expected inputs and outputs?\n- What is an unexpected input?\n- How should I test this?\n- How can the program handle failure gracefully?\n- When and how should model data be retrieved from and persisted to the data store?\n\n## Specifications\n\n#### Commands\n\nExpose the following commands (and more, if you need) using the `scripts` property of your `package.json`.\n\n- [ ] `$ npm run test`: run all tests.\n- [ ] `$ npm run repl`: open a REPL session with all your library code loaded.\n- [ ] `$ npm run db:create`: create the database for the current `NODE_ENV`.\n- [ ] `$ npm run db:migrate`: run all schema migrations for the database.\n- [ ] `$ npm run db:seed`: insert seed (sample) data into the database.\n- [ ] `$ npm run db:drop`: delete the database for the current `NODE_ENV`.\n- [ ] `$ npm run db:reset`: drop, create, and migrate the database.\n- [ ] `$ npm run db:console`: open a console session for running queries against the database.\n\n#### User Stories\n\nCreate models with interfaces to satisfy the following user stories, assuming the \"user\" in this case is a programmer using your data model.\n\n- [ ] As a user of the `Train` model, I can...\n  - [ ] get the number of a particular train.\n  - [ ] get the capacity for passengers of a particular train.\n  - [ ] get the passengers of a particular train.\n  - [ ] determine whether a particular train is full (at capacity) or not.\n  - [ ] determine the current station of a particular train.\n  - [ ] determine the next station of a particular train.\n  - [ ] determine which train is arriving next at a particular station.\n  - [ ] move a train to its next station.\n  - [ ] offboard passengers whose destination is a train's current station.\n  - [ ] onboard passengers of a train at the current station.\n  - [ ] find a train by its number.\n  - [ ] create a new train.\n  - [ ] save new trains to the database.\n  - [ ] update existing trains in the database.\n  - [ ] delete a train from the database.\n- [ ] As a user of the `Train` model, I receive appropriate and descriptive errors.\n- [ ] As a user of the `Station` model, I can run unit tests that exercise the specs for every public property, instance method, and class method.\n- [ ] As a user of the `Station` model, I can...\n  - [ ] get the ID of a particular station.\n  - [ ] get the location of a particular station.\n  - [ ] get the passengers waiting for a train at a particular station.\n  - [ ] get the passengers who have tickets at a particular station.\n  - [ ] get the previous station on the line for a particular station.\n  - [ ] get the next station on the line for a particular station.\n  - [ ] determine which is the next train arriving at a particular station.\n  - [ ] find a station by its ID.\n  - [ ] find a station by its location.\n  - [ ] create a new station.\n  - [ ] save new stations to the database.\n  - [ ] update existing stations in the database.\n  - [ ] delete a station from the database.\n- [ ] As a user of the `Station` model, I receive appropriate and descriptive errors.\n- [ ] As a user of the `Station` model, I can run unit tests that exercise the specs for every public property, instance method, and class method.\n- [ ] As a user of the `Passenger` model, I can...\n  - [ ] get the ID of a particular passenger.\n  - [ ] get the name of a particular passenger.\n  - [ ] get a particular passenger's ticket.\n  - [ ] set the current station of a particular passenger.\n  - [ ] buy a ticket for a particular passenger from their current station to another specified station.\n  - [ ] use a ticket for a particular passenger.\n  - [ ] determine the current train for a particular passenger.\n  - [ ] determine the current station for a particular passenger.\n  - [ ] find a passenger by their ID.\n  - [ ] find a passenger by their name.\n  - [ ] find all passengers at a station.\n  - [ ] find all passengers on a train.\n  - [ ] create a new passenger.\n  - [ ] save new passengers to the database.\n  - [ ] update existing passengers in the database.\n  - [ ] delete a passenger from the database.\n- [ ] As a user of the `Passenger` model, I receive appropriate and descriptive errors.\n- [ ] As a user of the `Station` model, I can run unit tests that exercise the specs for every public property, instance method, and class method.\n\n### Required\n\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nPick a _different_ database from the one you used (some ideas: CouchDB, Mongo, Neo4J, MariaDB) and write an alternate implementation.\n\n- [ ] Equivalent commands exist for the alternate database.\n- [ ] A database module exists with configuration options to specify which database to use.\n- [ ] All tests pass when using the alternate database.\n\n## Quality Rubric\n\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Clear and useful README**\n- Repository includes a README file with installation and setup instructions. [25 points]\n- Repository includes a README file with usage instructions and at least one example use case. [25 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n[mit-license]: https://opensource.org/licenses/MIT\n[metrorail-repo]: https://github.com/GuildCrafts/metrorail\n[metrorail-web-api]: ./127-MetroRail-Web_API.md"
}