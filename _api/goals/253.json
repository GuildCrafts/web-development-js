{
  "authors": [
    "tannerwelsh"
  ],
  "team_size": 2,
  "goal_id": 253,
  "title": "Init 3: Hello, Web Servers",
  "created_at": "2017-03-30T10:38:28Z",
  "labels": [
    "practice",
    "foundational"
  ],
  "published": true,
  "level": "1",
  "redirect_from": "/goals/253",
  "url": "http://jsdev.learnersguild.org/goals/253-Init_3-Hello_Web_Servers.html",
  "xp_value": 100,
  "content": "# Init 3: Hello, Web Servers\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write object-oriented JavaScript and execute it on both the browser and with Node.js\n- Have completed the first two initiation goals: [1][bossggle-word-game] and [2][bike-shop-oop] (or something similar)\n- Have used git and GitHub to do basic tasks like forking, cloning, making commits, and pushing to a remote repository\n- Are familiar with the Node.js programming environment and with npm\n- Are interested in building full-stack web apps with Node.js\n- Are interested in using the popular [Express.js][express] framework\n\n## Description\n\nBuild a [markdown][] editor app using Node.js and the popular Express.js framework. The final product will be similar to (but a lot simpler than) this app: http://dillinger.io/.\n\nWhen people talk about \"full-stack web development\", usually what they mean is the process of building applications that run on both a _server_ and a _client_.\n\nIn this goal, you'll build a \"full-stack\" web app with code that runs in both environments.\n\nIf this is your first time working with [Express.js][express], you may want to take some time up front to get oriented. Review the [Resources](#resources) to get started.\n\n### Recommended Pace\n\nIt is recommended (but not required) that you follow along with the day-by-day pace included here. These are designed to help you break down the problem into more manageable parts so that you can pace your work appropriately and leave time to explore the [learning resources](#resources).\n\nEach day, pay attention to the **terms & concepts** highlighed in **bold**. By the end of the day, you should have a better idea of what they mean and how to use them. In other words, aim to be able to answer the question \"what is X?\" for yourself.\n\nDepending on how much support you and your team need, balance solo and team time. Make sure to always review the day's work with your team and share important learnings.\n\n#### Day 1\n\nWith your team, complete the specs in [Stage 1](#stage-1) to set up your initial Express app and learn:\n\n- how a **web server** program is set up\n- how browsers send **requests** to servers and servers reply with a **response**\n- what a **static file** is in the context of the web\n- what it means for a server to be **listening** on a particular **port**\n\n#### Day 2\n\nWith your team, complete the specs in [Stage 2](#stage-2) to organize your view files with the [Pug][] templating engine. You'll be learning and practicing:\n\n- what an **HTML template** is and how it works\n- how to split HTML templates into smaller components using **includes**\n- how templating is similar to **string interpolation**\n- how to include and organize your **static files** like CSS\n\n#### Day 3\n\nWith your team, complete the specs in [Stage 3](#stage-3) to implement the \"MVP\" (Minimum Viable Product) feature: being able to write and render markdown text. You'll be learning and practicing:\n\n- how to install a JavaScript **package** for use in the browser\n- what **markdown** is and how it is used\n- what it means to **render** markdown text to HTML\n- how to listen for **key press events** in the browser\n- how to **send data** from a browser to the server\n- how to use Node.js to **read and write to a file**\n\n#### Day 4\n\nWith your team, complete the specs in [Stage 4](#stage-4) to add the more advanced feature of the product: managing multiple files. You'll be learning and practicing:\n\n- what **routes** are and how to use them in Express.js\n- how to **create new files** programmatically with Node.js\n- how to use **iteration** in your HTML templates\n- what **cookies** are and how to use them in Express.js\n\n#### Day 5\n\nThis day is open! There are a lot of new things to learn this week, so use this last day to revisit the areas you least understand.\n\nUse the [Resources](#resources) where applicable, but don't limit yourself to them! There are plenty of great resources online that you can use.\n\n## Context\n\nThe series of initiation goals are designed for new members of Learners Guild to get oriented to the learning environment, build key foundational skills, and work on some fun projects.\n\n1. [Init 1: Bossggle Word Game][bossggle-word-game]\n1. [Init 2: OOP Practice with Bike Shop][bike-shop-oop]\n1. [Init 3: Hello Web Servers][hello-web-servers]\n1. [Init 4: Relational Databases][relational-databases]\n1. [Init 5: Web APIs][web-apis]\n1. [Init 6: Developer Tools][developer-tools]\n\nBy the time you are finished with these initiation goals, you should be skilled enough to complete the [Simple Book Store][simple-book-store] goal: it is a good target for you to aim for in your first 6 weeks.\n\nIn [Bossggle][bossggle-word-game], you wrote JavaScript to run in a browser (a _client_), but it didn't need a _server_ (until you published to GitHub Pages, in which case GitHub became the server). In [OOP Practice][bike-shop-oop], you wrote JavaScript to run in the _Node.js_ environment.\n\nThis goal will help you learn to tie these two pieces together: to create a \"full-stack\" web app that runs code on _both_ the client and the server.\n\n## Specifications\n\nThese are the basic specs for \"Hello, Web Servers\", broken into 5 stages. If you complete these specs, try taking on some of the [Stretch specs](#stretch).\n\n#### Stage 1\n\nSetup the repo and file structure, install and configure [Express][], and get a basic server running.\n\n- [ ] Repo (your artifact) is created on GitHub\n- [ ] Repo follows a conventional file structure for an Express.js app:\n  - [ ] `package.json`: standard for any Node.js app; includes package info and lists dependencies\n  - [ ] `app.js`: your Express server, with all routes defined\n  - [ ] `views/`: for storing your Pug HTML templates\n  - [ ] `public/`: for storing static files like CSS and images\n  - [ ] `README.md`: includes overview of your repo\n- [ ] Express server can be started with `$ node app.js`\n- [ ] Server renders a page at the root route (`/`) that looks like the [mockup](#mockups) but does not have any functionality - it is just a static page\n- [ ] All package dependencies are defined in `package.json`\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license]\n\n#### Stage 2\n\nBuild out the template structure with [Pug][] for a single-file editor. Don't worry about multiple files for now, or implementing the markdown rendering.\n\n- [ ] [Pug][] is installed and set up for HTML templating\n- [ ] View template files are created in the `/views` subdirectory\n- [ ] Main view file is called `index`\n- [ ] Includes are created for the different \"components\" of the main view:\n  - [ ] Sidebar (shows list of files)\n  - [ ] Header (shows current filename, word count, and save button)\n  - [ ] Editor (shows markdown editor pane)\n  - [ ] Preview (shows rendered markdown)\n- [ ] CSS is organized into one or more files in the `public/` directory\n- [ ] CSS declarations are well-named and formatted (consider using this [small guide](http://tinystride.com/articles/organized-css-a-small-guide/))\n\n#### Stage 3\n\nSetup real markdown rendering so that writing in the left panel updates the right panel, and make the \"Save\" button work.\n\n- [ ] [Marked][] is installed\n- [ ] Markdown text written in the \"Editor\" pane is rendered in the \"Preview\" pane automatically\n- [ ] Preview is updated every time text in the editor changes\n- [ ] Clicking the \"Save\" button saves the markdown text in the editor to a file in a subdirectory of the server `data/`\n- [ ] The markdown file in `data/` is loaded and used as the starter text in the editor (in other words, the last saved text is loaded by default)\n\n#### Stage 4\n\nBuild out multiple-file functionality, and use cookies to remember the last opened file.\n\n- [ ] Users can create more than one markdown file\n- [ ] Each file has its own URL, named after its filename (for example, if the markdown file is called `Todos.md`, its URL would be `http://localhost:3000/todos`)\n- [ ] Markdown files are listed in the sidebar\n- [ ] Clicking on the \"New File\" button in the sidebar lets users create a new file and prompts for the file name using `prompt()`\n- [ ] Clicking on a file in the sidebar will navigate to the page, load the file contents into the editor, and render them in the preview\n- [ ] Markdown content can still be saved to files in `data/`, with one file in `data/` for each file in the sidebar\n- [ ] Most recently edited file is tracked using a cookie\n- [ ] When visiting the root route (`/`), users are redirected to the file they last edited\n\n#### Stage 5\n\nNo stage 5! Move into stretch specs, or use the time to polish up your code.\n\n### Mockups\n\nTry to mimic the following mockup as closely as you can. Note that some of the features in the mockup are part of the [stretch specs](#stretch) - you don't have to build those yet.\n\n<img alt=\"mmmarkdown-mockup\" width="800" src=\"https://cloud.githubusercontent.com/assets/709100/24804622/01ad8ffe-1b7d-11e7-91f4-a60303a79ff8.png\">\n\n##### with comments\n\n<img alt=\"mmmarkdown-mockup-with-comments\" width="800" src=\"https://cloud.githubusercontent.com/assets/709100/24805262/2824fd32-1b7f-11e7-9690-5576477151c6.png\">\n\n#### New File\n\n<img alt=\"mmmarkdown-mockup-new-file\" width="800" src=\"https://cloud.githubusercontent.com/assets/709100/24805253/23e24c84-1b7f-11e7-8820-5f5e022da97b.png\">\n\n### Stretch\n\nIf you complete all of the specs listed above (the checkboxes), there's no reason to stop there! Try building more advanced features with these stretch specs.\n\n- [ ] Clicking the trash can icon...\n  - [ ] Deletes the file from the `data/` folder\n  - [ ] Shows the sidebar updated without the deleted file\n- [ ] \"Word count\" section in the header displays the word count for the currently open file\n\nAnd if you get through those, try turning [Bossggle][bossggle-word-game] into an Express app.\n\n- [ ] New repo `bossggle-server` is created\n- [ ] Bossggle works the same as in the serverless version, but is built with [Express][] and [Pug][]\n- [ ] Score and word history is saved using [localStorage][mdn-localstorage]\n\n## Resources\n\nUse these resources to fill in the gaps in your skills and knowledge as you find them. There is more here than you can do in a week, so focus on the areas that are in your zone of proximal development (ZPD).\n\n##### Tools\n\n- [Express.js][express]: \"Fast, unopinionated, minimalist web framework for Node.js\"\n- [Pug][]: \"robust, elegant, feature rich template engine for Node.js\"\n- [Marked][]: \"A full-featured markdown parser and compiler, written in JavaScript. Built for speed.\"\n\n##### Guides\n\n- The official [Express.js Guide][express-guide] #express #nodejs\n- The official [Pug Getting Started][pug-getting-started] #pug #html\n- MDN: [Introduction to the DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction) #html #dom #js\n- MDN: [Guide to Event Handlers](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers) #dom #js\n\n##### Courses\n\n- Treehouse: [Express Basics (3h)](https://teamtreehouse.com/library/express-basics) #express #nodejs\n- Treehouse: [Understanding Express Middleware (23m)](https://teamtreehouse.com/library/understanding-express-middleware-2) #express #middleware\n- Code School: [Building Blocks of Express.js (5h)](https://www.codeschool.com/courses/building-blocks-of-express-js) #express #js\n\n##### Books\n\n- [Eloquent JavaScript](http://eloquentjavascript.net) #js\n  - Especially [Chapter 20: Node.js](http://eloquentjavascript.net/20_node.html) #nodejs\n\n##### Tutorials\n\n- [JavaScript.info](https://javascript.info/) #js\n\n\n[simple-book-store]: {{ site.url }}{% link _goals/69-Simple_Book_Store.md %}\n\n[bossggle-word-game]: {{ site.url }}{% link _goals/251-Init_1-Bossggle_Word_Game.md %}\n[bike-shop-oop]: {{ site.url }}{% link _goals/252-Init_2-OOP_Practice_with_Bike_Shop.md %}\n[hello-web-servers]: {{ site.url }}{% link _goals/253-Init_3-Hello_Web_Servers.md %}\n[relational-databases]: {{ site.url }}{% link _goals/254-Init_4-Relational_Databases.md %}\n[web-apis]: {{ site.url }}{% link _goals/255-Init_5-Web_APIs.md %}\n[developer-tools]: {{ site.url }}{% link _goals/256-Init_6-Developer_Tools.md %}\n\n[express]: https://expressjs.com/\n[express-guide]: https://expressjs.com/en/guide/routing.html\n[pug]: https://pugjs.org/\n[pug-getting-started]: https://pugjs.org/api/getting-started.html\n[marked]: https://www.npmjs.com/package/marked\n\n[markdown]: https://daringfireball.net/projects/markdown/syntax\n\n[mdn-localstorage]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n\n[mit-license]: https://opensource.org/licenses/MIT"
}