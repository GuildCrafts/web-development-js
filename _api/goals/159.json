{
  "authors": [
    "tannerwelsh"
  ],
  "goal_id": 159,
  "team_size": 1,
  "title": "Core Algorithms [Sorting, Searching, Graphing, Geometry]",
  "created_at": "2016-12-31T16:12:46Z",
  "labels": [
    "core"
  ],
  "published": true,
  "level": "1",
  "redirect_from": "/goals/159",
  "url": "http://jsdev.learnersguild.org/goals/159-Core_Algorithms-Sorting_Searching_Graphing_and_Geometry.html",
  "xp_value": 50,
  "dynamic": false,
  "content": "# Core Algorithms [Sorting, Searching, Graphing, Geometry]\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can use problem decomposition to split difficult problems into smaller parts\n- Have used pseudocode as an intermediary step in writing a program\n- Are interested in common computer science algorithms\n- Are interested in critical thinking and problem solving\n\n## Description\n\nThis is a sub-goal of [Core Algorithms][core-algos]. Reference that goal for more description, context, and resources.\n\nComplete **ONLY** the [Sorting and Searching](https://github.com/GuildCrafts/core-algorithms/blob/master/algorithms.md#sorting-and-searching) and [Graphing and Geometry](https://github.com/GuildCrafts/core-algorithms/blob/master/algorithms.md#graphing-and-geometry) algorithms, not the Classic, Numeric, or Set Operations. That's a [separate goal][core-algos-basic]. :)\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [core-algorithms][core-algorithms] repo.\n- [ ] Can run all tests with `npm test`.\n- [ ] `binarySearch()` algorithm is correctly implemented.\n- [ ] Tests for `binarySearch()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `bubbleSort()` algorithm is correctly implemented.\n- [ ] Tests for `bubbleSort()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `mergeSort()` algorithm is correctly implemented.\n- [ ] Tests for `mergeSort()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `closestPair()` algorithm is correctly implemented.\n- [ ] Tests for `closestPair()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] `isConnectedGraph()` algorithm is correctly implemented.\n- [ ] Tests for `isConnectedGraph()` exist with at least 2 unit tests using valid inputs, and at least 1 unit test using invalid inputs.\n- [ ] Repository includes a README file with basic installation and setup instructions.\n- [ ] All dependencies are properly declared in `package.json`.\n- [ ] All major features are added via pull requests with a clear description and concise commit messages.\n- [ ] Code uses a linter and there are no linting errors.\n- [ ] Variables, functions, files, etc. have appropriate and meaningful names.\n- [ ] Functions are small and serve a single purpose.\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nPick a _different_ programming language from JavaScript (e.g. Ruby, Swift, Python, C, Java...) and write tests & implementations for each.\n\n- [ ] Can run all non-JavaScript tests with a single command.\n- [ ] For each algorithm identified above, there exists:\n  - [ ] a test file with multiple unit tests for each algorithm  _in a language other than JavaScript_.\n  - [ ] an implementation file with a correct implementation of the algorithm _in a language other than JavaScript_.\n\n[core-algos]: {{ site.url }}{% link _goals/123-Core_Algorithms.md %}\n[core-algos-basic]: {{ site.url }}{% link _goals/158-Core_Algorithms-Classic_Numeric_and_Set.md %}"
}