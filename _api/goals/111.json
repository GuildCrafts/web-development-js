{
  "authors": [
    "alfonsotech"
  ],
  "team_size": 1,
  "goal_id": 111,
  "title": "Tweet-reGenerator with Node.js",
  "created_at": "2016-12-04T00:57:52Z",
  "labels": [
    "practice"
  ],
  "published": true,
  "level": "1",
  "redirect_from": "/goals/111",
  "url": "http://jsdev.learnersguild.org/goals/111-Tweet-reGenerator_with_Node.html",
  "content": "# Tweet-reGenerator with Node.js\n\n## Challenge Rubric\n\nThis goal will likely be within your ZPD if you...\n\n- Can build basic CRUD apps with Node.js and a SQL database\n- Have a Twitter account and are familiar with basic Twitter concepts (like re-tweeting)\n- Are interested in building full-stack web applications with frameworks like [Express][]\n- Are interested in using a live web API\n\n## Description\n\nA web application that will allow the developer-user to collect their tweets and save them to a database of \"evergreen\" (not dated, always relevant) tweets. They will then be able to retweet tweets stored in said database either at regular intervals, or manually.\n\nThis Tweet-reGenerator is a Twitter-dedicated, light-weight clone of [MeetEdgar](https://meetedgar.com/), a social media management tool.\n\nBuilding this app will require use of the [Twitter REST API][] with OAuth (meaning that you will need to get an API key from Twitter in order to access the API), JavaScript, [Node.js][node], [Express][], routing by way of [Routes.js][routes-js], the [MySQL][mysql] database, and a templating engine like [Handlebars][].\n\n_Note: this is only one suggested stack; you could also do it using express, PostgreSQL, pug (as many projects at the guild seem to do), or you could go the React/MongoDb way. Up to the developer team to decide what technologies to implement._\n\n## Context\n\nThe life-span for a tweet is about 20 minutes, which means that most of your Twitter followers will not see your tweets the first time you post them. For this reason, re-tweeting your best content is a good idea.\n\nThis web app will allow you to grab and store your best, evergreen content tweets and re-tweet them to your followers. By keeping your Twitter followers better informed and entertained, you will organically grow your Twitter audience faster.\n\nDevelopers/Learners will get practice working with Twitter's REST APIs on the backend; and with creating and working with a database on the backend (CRUD).\n\n## Specifications\n\n- [ ] App uses the Twitter API.\n- [ ] Users can view their ten most recent tweets from Twitter.\n- [ ] Users can click a button to save a tweet to the database for future access.\n- [ ] Users can view their saved tweets (the ones in the database, not the ones from Twitter).\n- [ ] Users can re-tweet saved tweets at a specified time interval:\n  - [ ] Immediately\n  - [ ] At a random time in the future\n  - [ ] At a specific time in the future\n- [ ] Users can view which saved tweets have been re-tweeted and when.\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\n- [ ] App retrieves past tweets from Twitter automatically as they are being tweeted out.\n- [ ] Users can edit saved tweets.\n- [ ] Users can delete saved tweets.\n- [ ] Users can search for and save another user's tweets by accessing and capturing their Twitter feed.\n- [ ] Users can organize saved tweets according to categories (use of filters).\n\n## Quality Rubric\n\n- UI provides an attractive, intuitive user experience: 50 points.\n- Code is readable and well organized: 50 points.\n\n## Resources\n\n- [Twitter REST API][twitter-rest-api]\n- [Node.js][node]\n- [Express][express]\n- [Routes.js][routes-js]\n- [MySQL][mysql]\n- [Handlebars][handlebars]\n\n[mit-license]: https://opensource.org/licenses/MIT\n\n[twitter-rest-api]: https://dev.twitter.com/overview/api\n[node]: https://nodejs.org/en/\n[express]: http://expressjs.com/\n[routes-js]: https://www.npmjs.com/package/routes-js\n[mysql]: https://www.mysql.com/\n[handlebars]: http://handlebarsjs.com/"
}