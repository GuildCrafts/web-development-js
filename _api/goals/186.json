{
  "authors": [
    "punitrathore"
  ],
  "goal_id": 186,
  "team_size": 1,
  "title": "Promises Applied",
  "created_at": "2017-02-21T23:53:30Z",
  "labels": [
    "foundational"
  ],
  "published": true,
  "level": "1",
  "redirect_from": "/goals/186",
  "url": "http://jsdev.learnersguild.org/goals/186-Promises_Applied.html",
  "base_xp": 50,
  "bonus_xp": 3.75,
  "dynamic": false,
  "content": "# Promises Applied\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Are familiar with SQL (the core-sql [goal](https://github.com/GuildCrafts/web-development-js/issues/178) is highly recommended)\n- Are familiar with object oriented programming in JavaScript\n- Are interested in learning about JavaScript Promises\n- Are interested in creating functions which use Promises\n- Are interested in learning how to use the `pg-promise` library\n\n## Description\n\nA theoritical and practical approach to understanding JavaScript Promises.\n\nThis goal makes heavy use of external resources: the [Promises Course][promises-course] course on [Udacity](https://www.udacity.com/).\n\nFor the first two days you will be working on existing courses and completing tutorials. Then you'll use your skills to complete a set of exercises, and submit your solutions as your artifacts.\n\nFork the repo [promises-exercises][promises-exercises] which contains the exercises you need to complete, and make it your artifact.\n\n\n## Context\n\nJavaScript is an asynchronous programming language, and if you want want to avoid [callback hell](http://callbackhell.com/) you will have to learn to use Promises.\n\nPromises provide a simpler alternative for executing, composing, and managing asynchronous operations when compared to traditional callback-based approaches. They also allow you to handle asynchronous errors using approaches that are similar to synchronous `try/catch`.\n\n## Specifications\n\nStart by forking the [promises-exercises][promises-exercises] repo. Save your work to this repo.\n\n### Day 1 & 2\n\nComplete these sections (including the exercises) of the [Rethinking Asynchronous JavaScript][fem-async-js] on Frontend Masters:\n- Parallel vs. Async\n- Callback\n- Thunks\n- Promises\n\nComplete the [Understanding Promises in JavaScript][treehouse-workshop-promises] workshop (22m).\n\nRead [this](https://coligo.io/javascript-promises-plain-simple/) blog post and [this](https://scotch.io/tutorials/understanding-javascript-promises-pt-i-background-basics) blog post.\n\nMake sure to save the exercises from the Frontend Masters course:\n\n- [ ] Callback exercise 1 is completed and saved to a file in your repo.\n- [ ] Thunks exercise 2 is completed and saved to a file in your repo.\n- [ ] Promises exercises 3-6 are completed and saved to a file in your repo.\n\nIf you complete the above with time to spare, fill any gaps in your understanding by skimming through the [Promises Course][promises-course] on Udacity.\n\n### Day 3 & 4\n\nComplete exercises 1-13 in the [promise-it-wont-hurt-solutions][promise-it-wont-hurt-solutions].\n\n- [ ] `src/01-warmup.js` is complete and written to the appropriate file.\n- [ ] `src/02-fullfill-a-promise.js` is complete and written to the appropriate file.\n- [ ] `src/03-reject-a-promise.js` is complete and written to the appropriate file.\n- [ ] `src/04-to-reject-or-not-to-reject.js` is complete and written to the appropriate file.\n- [ ] `src/05-always-asynchronous.js` is complete and written to the appropriate file.\n- [ ] `src/06-shortcuts.js` is complete and written to the appropriate file.\n- [ ] `src/07-promise-after-promise.js` is complete and written to the appropriate file.\n- [ ] `src/08-values-and-promises.js` is complete and written to the appropriate file.\n- [ ] `src/09-throw-an-error.js` is complete and written to the appropriate file. _\\*see note below_\n- [ ] `src/10-an-important-file.js` is complete and written to the appropriate file. _\\*see note below_\n- [ ] `src/11-multiple-promises.js` is complete and written to the appropriate file.\n- [ ] `src/12-fetch-json.js` is complete and written to the appropriate file.\n- [ ] `src/13-do-some-work.js` is complete and written to the appropriate file.\n\n\\*Note: `promise-it-wont-hurt` has a bug which checks the full path of the files, instead of the relative paths. This causes exercise 9 & 10's verify command to fail even though the solution is correct. If the file path is the only error that you are seeing, it means that your code is correct.\n\n### Day 5\n\nLook at the [documentation](https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example) of the `pg-promise` repository.\n\nComplete exercises 1-7 in the [pg promise exercises][pg-promise-exercises].\n\n- [ ] Exercise 1 is complete.\n- [ ] Exercise 2 is complete.\n- [ ] Exercise 3 is complete.\n- [ ] Exercise 4 is complete.\n- [ ] Exercise 5 is complete.\n- [ ] Exercise 6 is complete.\n- [ ] Exercise 7 is complete.\n\n### General\n- [ ] All package dependencies are properly declared in `package.json`.\n- [ ] All major features are added via pull requests with a clear description and concise commit messages.\n- [ ] Code uses a linter and there are no linting errors.\n- [ ] Variables, functions, files, etc. have appropriate and meaningful names.\n- [ ] Functions are small and serve a single purpose.\n\n### Stretch\n- [ ] Read Google's [Introduction](https://developers.google.com/web/fundamentals/getting-started/primers/promises) to Promises\n\n## Resources\n- https://developers.google.com/web/fundamentals/getting-started/primers/promises\n- https://coligo.io/javascript-promises-plain-simple/\n- https://scotch.io/tutorials/javascript-promises-for-dummies\n- https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\n- https://blog.domenic.me/youre-missing-the-point-of-promises/\n- https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example\n\n[promise-it-wont-hurt-solutions]: https://github.com/GuildCrafts/promises-exercises/tree/master/promise-it-wont-hurt-solutions\n[promises-course]: https://www.udacity.com/course/javascript-promises--ud898\n[pg-promise-exercises]: https://github.com/GuildCrafts/promises-exercises/tree/master/pg-promise-exercises\n[promises-exercises]: https://github.com/GuildCrafts/promises-exercises\n[treehouse-workshop-promises]: https://teamtreehouse.com/library/understanding-promises-in-javascript\n[fem-async-js]: https://frontendmasters.com/courses/rethinking-async-js/"
}