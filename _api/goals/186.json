{"authors":["@punitrathore"],"issueNumber":186,"teamSize":1,"title":"Promises Applied","createdAt":"2017-02-21T23:53:30Z","labels":["foundational"],"published":true,"level":"1","redirect_from":"/goals/186","content":"# Promises Applied\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Are familiar with SQL (the core-sql [goal](https://github.com/GuildCrafts/web-development-js/issues/178) is highly recommended)\n- Are familiar with object oriented programming in JavaScript\n- Are interested in learning about JavaScript Promises\n- Are interested in creating functions which use Promises\n- Are interested in learning how to use the `pg-promise` library\n\n## Description\n\nA theoritical and practical approach to understanding JavaScript Promises.\n\nThis goal makes heavy use of external resources: the [Promises Course][promises-course] course on [Udacity](https://www.udacity.com/).\n\nFor the first two days you will be working on existing courses and completing tutorials. Then you'll use your skills to complete a set of exercises, and submit your solutions as your artifacts.\n\nFork the two repos [promise-it-wont-hurt-solutions][promise-it-wont-hurt-solutions] and [pg-promise-exercises][pg-promise-exercises] which contain the exercises you need to complete, and make them your artifacts.\n\n\n## Context\n\nJavaScript is an asynchronous programming language, and if you want want to avoid [callback hell](http://callbackhell.com/) you will have to learn to use Promises.\n\nPromises provide a simpler alternative for executing, composing, and managing asynchronous operations when compared to traditional callback-based approaches. They also allow you to handle asynchronous errors using approaches that are similar to synchronous `try/catch`.\n\n## Specifications\n\n### Day 1 & 2\n- [ ] Complete the [Promises Course][promises-course] on Udacity\n\n### Day 3 & 4\n- [ ] Exercises 1-13 in the [promise-it-wont-hurt-solutions][promise-it-wont-hurt-solutions] are complete and written to the appropriate file:\n  - [ ] `src/01-warmup.js`\n  - [ ] `src/02-fullfill-a-promise.js`\n  - [ ] `src/03-reject-a-promise.js`\n  - [ ] `src/04-to-reject-or-not-to-reject.js`\n  - [ ] `src/05-always-asynchronous.js`\n  - [ ] `src/06-shortcuts.js`\n  - [ ] `src/07-promise-after-promise.js`\n  - [ ] `src/08-values-and-promises.js`\n  - [ ] `src/09-throw-an-error.js`\n  - [ ] `src/10-an-important-file.js`\n  - [ ] `src/11-multiple-promises.js`\n  - [ ] `src/12-fetch-json.js`\n  - [ ] `src/13-do-some-work.js`\n\n### Day 5\n- [ ] Look at the [documentation](https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example) of the `pg-promise` repository\n- [ ] Exercises 1-7 in the [pg promise exercises][pg-promise-exercises] are complete\n  - [ ] Exercise 1\n  - [ ] Exercise 2\n  - [ ] Exercise 3\n  - [ ] Exercise 4\n  - [ ] Exercise 5\n  - [ ] Exercise 6\n  - [ ] Exercise 7\n\n### Stretch\n- [ ] Read Google's [Introduction](https://developers.google.com/web/fundamentals/getting-started/primers/promises) to Promises\n\n## Quality Rubric\n**Well formatted code**\n- Code uses a linter, which can be invoked with a command (e.g. `npm run lint`). [50 points]\n- Running the linter on all source code files generates no linting errors. [50 points]\n\n**Proper dependency management**\n- There is a command to install dependencies (e.g. `npm install`) and it is specified in the installation and setup instructions of the README. [50 points]\n\n**Good project management**\n- Commit messages are concise and descriptive. [25 points]\n- All features are added via pull requests. [25 points]\n- Every pull request has a description summarizing the changes made. [25 points]\n- Every pull request has been reviewed by at least one other person. [25 points]\n\n## Resources\n- https://developers.google.com/web/fundamentals/getting-started/primers/promises\n- https://coligo.io/javascript-promises-plain-simple/\n- https://scotch.io/tutorials/javascript-promises-for-dummies\n- https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\n- https://blog.domenic.me/youre-missing-the-point-of-promises/\n- https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example\n\n[promise-it-wont-hurt-solutions]: https://github.com/GuildCrafts/promise-it-wont-hurt-solutions\n[promises-course]: https://www.udacity.com/course/javascript-promises--ud898\n[pg-promise-exercises]: https://github.com/GuildCrafts/pg-promise-exercises"}