{"authors":["jrob8577"],"teamSize":2,"issueNumber":69,"title":"Simple Book Store","createdAt":"2016-08-12T23:16:31Z","labels":["practice"],"published":true,"level":"1","redirect_from":"/goals/69","content":"# Simple Book Store\n\n## Challenge Rubric\n\nThis goal will likely be within your ZPD if you...\n\n- Can build basic websites with HTML & CSS\n- Can add behavior to a website with JavaScript\n- Are familiar with SQL and relational databases like [PostgreSQL][]\n- Are familiar with JavaScript promises\n- Are interested in building full-stack web applications with frameworks like [Express][]\n- Are interested in learning CRUD (Create, Read, Update, Delete) relational database interactions\n- Are interested in server-side templating with tools like [Pug][] or [EJS][]\n\n## Description\n\nYou've been tasked with building a web app for a local bookstore to help them manage their inventory.\n\nCreate a simple content management system that allows users to view, add, delete, and update books. Books entered in the system can be viewed in a list, as a single entry on its own page, or searched for using basic searches (by title, author, or genre).\n\nTo implement this system, you'll need to use (among other things)...\n\n- a _web application framework_ (we recommend [Express][])\n- a _database_ (we recommend [PostgreSQL][])\n- a tool for server-side _HTML templating_ (we recommend [Pug][])\n\nDon't sweat the UI design too much. If you want to add some quick and easy styles so that it doesn't look _too_ terrible, use a library like [Bootstrap][] or [Pure.css][pure-css].\n\nAlso, don't spend too much time coming up with book data if you need some seed data to work with. Use a fake data generator like [Faker](https://github.com/marak/Faker.js/) or just borrow a list from a data store like [this CSV](https://gist.github.com/jaidevd/23aef12e9bf56c618c41).\n\n## Context\n\nMany of the seemingly fancy apps on the web have functionality that can be reduced to just 4 simple operations: Create, Read, Update, and Delete (or CRUD for short). At their core, they are really just ways to perform these operations on some resource.\n\n- Writing a new tweet on Twitter? That's a _create_ operation.\n- Searching for photos tagged with `#kittenmittens` on Instagram? That's a _read_ operation.\n- Editing your profile information on LinkedIn? That's an _update_ operation.\n- Removing that 2am rant-post from Facebook? That's a _delete_ operation.\n\nLike the steel frame of a skyscraper, _CRUD_ is the skeleton around which web applications are built: it's not very sexy, but you have to know how to do it.\n\nIn this goal, you'll be applying the CRUD pattern to the real-world system of a bookstore.\n\n## Specifications\n\n- [ ] Books have a title, author, and genre\n- [ ] Users can...\n  - [ ] Add books into the bookstore system via an admin page (_create_)\n  - [ ] See a list of books on the home page (_read_)\n  - [ ] Edit a book's title, author, or genre (_update_)\n  - [ ] Delete a book from the bookstore (_delete_)\n  - [ ] Search for books by title OR by author OR by genre (_read_)\n  - [ ] View book details on a book detail page (_read_)\n- [ ] Lists of books are always paginated in groups of 10\n- [ ] Book detail view is linked to from the listing and search pages\n- [ ] Search results are presented in a new page\n- [ ] Appropriate HTTP verbs are used for CRUD actions\n  - [ ] `GET` requests are only used for _read_ actions\n  - [ ] `POST` requests are only used for _create_ actions\n  - [ ] `PUT` or `PATCH` requests are only used for _update_ actions\n  - [ ] `DELETE` requests are only used for _delete_ actions\n- [ ] All views are rendered on the server using server-side templates written with [Pug][] or [EJS][]\n- [ ] Web server can be started with the command `npm start`\n- [ ] Test suite can be run with the command `npm test`\n- [ ] All code submissions are peer reviewed via GitHub PR by at least one other member of the team\n- [ ] Master is always in a stable state (tests passing, site functions)\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license](https://opensource.org/licenses/MIT).\n\n### Stretch\n\n- [ ] App is deployed and live on the web (consider using Heroku)\n- [ ] All source code is written with ES6\n- [ ] Users have their own account and can sign up and log in/out\n- [ ] Users have one of three roles: `admin`, `clerk`, `reader`\n  - [ ] Users with role `reader` can only view and search for books\n  - [ ] Users with role `clerk` can edit books in addition to viewing/searching\n  - [ ] Users with role `admin` can perform all actions (create, read, update, delete) with books\n- [ ] Books have a price, cover image, publisher, and ISBN number\n\n## Quality Rubric\n\n- Code is well formatted without any linting errors [25 points]\n- Variables, functions, CSS classes, etc. are meaningfully named\\* [50 points]\n- Functions are small and serve a single purpose [50 points]\n- Code is well organized into a meaningful file structure [50 points]\n- Code is reasonably tested with a test suite [50 points]\n- Interface is user friendly [25 points]\n\n\\* _meaningfully named_ = no comments exist in code to explain functionality - the names serve that function.\n\n## Resources\n\nGuides and tutorials\n\n- [Getting started](https://expressjs.com/en/starter/installing.html) and [Guide](https://expressjs.com/en/guide/routing.html) sections of Express.js site\n- [Building a Node.js REST API with Express](https://medium.com/@jeffandersen/building-a-node-js-rest-api-with-express-46b0901f29b6#.qlp1sijze)\n- [Designing a RESTful API With Node and Postgres](http://mherman.org/blog/2016/03/13/designing-a-restful-api-with-node-and-postgres/)\n- [PostgreSQL and NodeJS](http://mherman.org/blog/2015/02/12/postgresql-and-nodejs/)\n- [Building a Simple CRUD Application with Express and MongoDB](https://zellwk.com/blog/crud-express-mongodb/) - uses MongoDB instead of PostgreSQL, but the rest of it is still useful\n\nTools and libraries\n\n- SQL modeling designer: http://ondras.zarovi.cz/sql/demo/\n- [Express][] as a lightweight web server framework\n- [PostgreSQL][] for data persistence\n- [Pug][] or [EJS][] for server-side templating\n- [Bootstrap][] or [Pure.css][pure-css] for styling the UI\n\n[express]: http://expressjs.com/\n[postgresql]: https://www.postgresql.org/\n[pug]: https://pugjs.org/\n[ejs]: http://www.embeddedjs.com/\n[bootstrap]: http://getbootstrap.com/\n[pure-css]: https://purecss.io/"}