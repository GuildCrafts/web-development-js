{
  "authors": [
    "tannerwelsh"
  ],
  "team_size": 2,
  "goal_id": 124,
  "title": "Multiple Paradigms",
  "created_at": "2016-12-29T17:00:54Z",
  "labels": [
    "core"
  ],
  "published": true,
  "level": "3",
  "redirect_from": "/goals/124",
  "url": "http://jsdev.learnersguild.org/goals/124-Multiple_Paradigms.html",
  "xp_value": 300,
  "content": "# Multiple Paradigms\n\n## Challenge Rating\n\nThis goal will likely be within your ZPD if you...\n\n- Can write programs and tests using Node.js and npm\n- Can write and format documents using Markdown\n- Can read and write HTML\n- Can do file I/O with Node.js\n- Are familiar with parsing\n- Are familiar with the concept of programming paradigms\n- Are interested in object-oriented programming\n- Are interested in functional programming\n- Are interested in comparing/contrasting programming styles\n\n## Description\n\nImplement a Markdown parser using three different programming paradigms: **object-oriented**, **functional**, and **imperative**.\n\nFork the [multiple-paradigms][multiple-paradigms] repository and use the fork as your project artifact.\n\nThe repository includes a skeleton script at `bin/parse` where you need to load and execute your Markdown parsers for each programming paradigm.\n\nTo parse a file, use the `npm run parse:<paradigm> <file.md>` command, where `<paradigm>` is one of either `oo` (object-oriented), `functional`, or `imperative` and `<file.md>` is a path to a Markdown-formatted file.\n\nFor example, say we have a file `hello.md` with the contents:\n\n```shell-session\n$ cat hello.md\n_Hello_.\n\n- My name is **Inigo Montoya**.\n- You killed my father.\n- Prepare to die.\n```\n\n...then the command `npm run parse:oo hello.md` (or `parse:functional`, or `parse:imperative`) should print the following:\n\n```shell-session\n$ npm run parse:oo hello.md\n<p><em>Hello</em>.</p>\n<ul>\n<li>My name is <strong>Inigo Montoya</strong>.</li>\n<li>You killed my father.</li>\n<li>Prepare to die.</li>\n</ul>\n```\n\nIf you're new to parsing strategies, take a look at the [resources](#resources) provided.\n\n## Context\n\nKnowing how, when, and where to apply a particular _programming paradigms_ to a a piece of code is a key skill of any self-respecting software developer.\n\nBeing fluent in different paradigms will help you to think about and understand software architecture, and to make better design choices. It is also a crucial tool for communicating effectively with other developers.\n\n## Specifications\n\n- [ ] Artifact produced is a fork of the [multiple-paradigms][multiple-paradigms] repo.\n- [ ] Can run all tests with `npm test`.\n- [ ] All tests are passing.\n- [ ] Can parse Markdown syntax ([reference](https://help.github.com/articles/basic-writing-and-formatting-syntax/)) and render correct HTML for...\n  - [ ] Paragraphs\n  - [ ] Headings\n  - [ ] Italicized text\n  - [ ] Bold text\n  - [ ] Links\n  - [ ] Images\n  - [ ] Unordered lists\n  - [ ] Ordered lists\n  - [ ] Blockquotes\n  - [ ] Horizontal rules\n  - [ ] Inline codes\n  - [ ] Code blocks\n- [ ] Object-oriented implementation employs key characteristics of the object-oriented style\n  - [ ] Encapsulation\n  - [ ] Message passing with objects\n  - [ ] Composition, inheritance, and delegation\n  - [ ] Polymorphism\n- [ ] Functional implementation employs key characteristics of the functional style\n  - [ ] Higher-order functions\n  - [ ] Pure functions\n  - [ ] Recursion\n  - [ ] Referential transparency\n- [ ] Imperative implementation employs key characteristics of the imperative style\n  - [ ] Subroutines\n  - [ ] Linear control flow\n  - [ ] Sequential state modifications\n  - [ ] Looping and branching statements\n- [ ] Repository includes a README file with basic installation and setup instructions.\n- [ ] All dependencies are properly declared in `package.json`.\n- [ ] All major features are added via pull requests with a clear description and concise commit messages.\n- [ ] Code uses a linter and there are no linting errors.\n- [ ] Variables, functions, files, etc. have appropriate and meaningful names.\n- [ ] Functions are small and serve a single purpose.\n- [ ] The artifact produced is properly licensed, preferably with the [MIT license][mit-license].\n\n### Stretch\n\nFor each programming paradigm, write a Markdown parser using a language that _specializes in that paradigm_.\n\n- [ ] Object-oriented-style Markdown parser is written in either [Java](https://www.java.com/en/) or [Ruby](https://www.ruby-lang.org/)\n- [ ] Functional-style Markdown parser is written in either [Clojure](https://clojure.org/) or [Haskell](https://www.haskell.org/)\n- [ ] Imperative-style Markdown parser is written in either [C](https://en.wikipedia.org/wiki/C_(programming_language)) or [Go](https://golang.org/)\\*\n\n_\\*It is a bit blasphemous to say that Go specializes in imperative programming, as it is a highly sophisticated language. That being said, it works just fine when using an imperative style._\n\n## Resources\n\n- [Parsing strategy](http://spec.commonmark.org/0.27/#appendix-a-parsing-strategy) appendix from the [CommonMark Spec](http://spec.commonmark.org/0.27/).\n- Github: [A formal spec for GitHub Flavored Markdown](https://githubengineering.com/a-formal-spec-for-github-markdown/).\n\n[mit-license]: https://opensource.org/licenses/MIT\n[multiple-paradigms]: https://github.com/GuildCrafts/multiple-paradigms"
}