{"sections":[{"section":"Backend","groups":[{"group":"API","path":"backend/api","levels":[{"level":0,"description":"understand API documentation and write code that consumes it"},{"level":1,"description":"Understands and is able to design a basic API and consume it"},{"level":2,"description":"Understands the ins and outs of great API design"},{"level":3,"description":"Experience with service oriented architecture design and implementation"}]},{"group":"Continuous Deployment","path":"backend/continuous-deployment","levels":[{"level":0,"description":"build a script that compiles the code for production"},{"level":1,"description":"Code is automatically built and tested through a CI server"},{"level":2,"description":"Configuration AND environment (Docker) is managed, functional AND nonfunctional (capacity) tests are automatically run"},{"level":3,"description":"N-tier archicture deployments are orchestrated (ansible, kubernetes) into a cloud-based environment, push-button deployment and other tools from an admin page"}]},{"group":"Database","path":"backend/database","levels":[{"level":0,"description":"Good relational Design, postgres & SQL basics, normalization, ACID. Can write basic read/write queries. "},{"level":1,"description":"ORM or patterns, migrations, can write more complex queries (joins, subqueries, etc.). Able to design good and normalized database schemas keeping in mind the queries that'll have to be run. "},{"level":2,"description":"document vs relational, uses transactions, basic knowledge of multiple techs (mongo, postgresql, elasticsearch, etc.). Proficient in use of views, stored procedures, triggers and user defined types. Knows difference between clustered and non-clustered indexes. "},{"level":3,"description":"In-depth knowledge of multiple techs (mongo, postgresql, elasticsearch, etc.). db mgmt and devops. db internals."}]},{"group":"HTTP","path":"backend/http","levels":[{"level":0,"description":"Basic codes, headers, post/get, URL, and parsing"},{"level":1,"description":"redirects, cookies, authentication, put/patch/delete, error codes"},{"level":2,"description":"CORS, advanced headers, web sockets"},{"level":3,"description":"Load balancing, eTag, reverse proxy caching"}]},{"group":"Node","path":"backend/node","levels":[{"level":0,"description":"Basic npm, Basic HTTP server (kow/express), aware of basic API methods"},{"level":1,"description":"Difference between sync and async functions, middleware, basic authentication, basic security"},{"level":2,"description":"Integrations with other services, SSO, SSR"},{"level":3,"description":"compilation/es6/async functions, security audits"}]},{"group":"Security","path":"backend/security","levels":[{"level":0,"description":""},{"level":1,"description":"Cleans requests from API"},{"level":2,"description":"Defends against CSRF and XSS, can set up SSL certs"},{"level":3,"description":"Defends against brute-force/DDoS attacks"}]},{"group":"Web Application Architecture","path":"backend/web-application-architecture","levels":[{"level":0,"description":"Basic web architecture. HTTP servers, static assets, templates, cookies, HTTP status, ports"},{"level":1,"description":"Authorization, asset managers, sockets, REST, API"},{"level":2,"description":"MVC, client side rendering and error handling"},{"level":3,"description":"Helpers, OAuth, caching, security, config files, HTTPS, Service-Oriented Architecture"}]}]},{"section":"Code Quality","groups":[{"group":"Code Construction","path":"code-quality/code-construction","levels":[{"level":0,"description":"Basics (Code Complete): concise commenting, intermediate variables, no long functions, well-factored self-documenting code, eslint is setup"},{"level":1,"description":"SOLID principals, knows popular eslint configs, and what eslint rules to break"},{"level":2,"description":"Has worked on larger code base with multiple developers, to see/participate in larger code base organization across multiple team"},{"level":3,"description":"Has worked on a project over a long period with multiple developers, to see common pitfalls and what is actually practical and maintainable"}]},{"group":"Code Organization","path":"code-quality/code-organization","levels":[{"level":0,"description":""},{"level":1,"description":"Methods are grouped logically or by accessibility. Basic separation of code into logical folders."},{"level":2,"description":"Code is grouped into regions and well commented with references to other source files. Each physical file has a unique purpose, for e.g. one class definition, one feature implementation etc. "},{"level":3,"description":"Code organization at a physical level closely matches design and looking at file names and folder distribution provides insights into design. Physical layout of source tree matches logical hierarchy and organization. The directory names and organization provide insights into the design of the system."}]},{"group":"Code Readability","path":"code-quality/code-readability","levels":[{"level":0,"description":""},{"level":1,"description":"Good names for files, variables classes, methods etc. Attention paid to commit messages. Consistent white space usage. "},{"level":2,"description":"No long functions, comments explaining unusual code, bug fixes, code assumptions functions, comments explaining unusual code, bug fixes, code assumptions. Clean, precise commit messages. "},{"level":3,"description":"Code assumptions are verified using asserts, code flows naturally - no deep nesting of conditionals or methods. Commit messages tell a coherent story. "}]},{"group":"Defensive Coding and Error Handling","path":"code-quality/defensive-coding-and-error-handling","levels":[{"level":0,"description":"Checks all arguments and asserts critical assumptions in code. Basic error handling around code that can throw exceptions/generate errors"},{"level":1,"description":"Makes sure to check return values and check for exceptions around code that can fail. Ensures that error/exceptions leave program in good state, resources, connections and memory is all cleaned up properly."},{"level":2,"description":"Codes to detect possible exception before, maintain consistent exception handling strategy in all layers of code, come up with guidelines on exception handling for entire system."},{"level":3,"description":"Has own library to help with defensive coding, writes unit tests that simulate faults"}]}]},{"section":"Frontend","groups":[{"group":"CSS and HTML","path":"frontend/css-and-html","levels":[{"level":0,"description":"CSS & HTML fundamentals. Basic selectors, properties, formatting, dev tools."},{"level":1,"description":"More selectors, units, validations"},{"level":2,"description":"Transitions, animations and data attributes"},{"level":3,"description":"CSS4, render engines, cross-browser quirks"}]},{"group":"Design","path":"frontend/design","levels":[{"level":0,"description":""},{"level":1,"description":"follow a design language (Material Design)"},{"level":2,"description":"Color, shape, grids, animation fundamentals, can suggest improvements to popular design languages"},{"level":3,"description":"Psychological foundations of design (psychological biases), creator of design language"}]},{"group":"JS in the Browser","path":"frontend/js-in-the-browser","levels":[{"level":0,"description":"Accessing & modifying DOM nodes, responding to user interactions, debugging with chrome developer tools"},{"level":1,"description":"AJAX / XHR"},{"level":2,"description":"Memory leaks and cookies"},{"level":3,"description":"Profiling and Garbage collection"}]},{"group":"React","path":"frontend/react","levels":[{"level":0,"description":"write JSX, knows the lifecycle events"},{"level":1,"description":"Knows when to use stateless vs stateful components, aware of common patterns (smart/dumb components), state management with *x library, knows top-level API, knows how React renders and how to improve performance, knowledge of common sister libraries (react-router, redux, etc.), has built a basic, medium-sized app (could build their own boilerplate)"},{"level":2,"description":"Has used cutting edge techs (Relay, GraphQL), has shipped a project into production, well-versed in testing react apps (enzyme), knows most common patterns and pitfalls (for instance, why mixins and isMounted() are antipatterns)"},{"level":3,"description":"Contributes to OSS, has read or contributed to React/*x source, has written a higher-order component, can write server-side-rendered apps if necessary"}]},{"group":"React Native","path":"frontend/react-native","levels":[{"level":0,"description":""},{"level":1,"description":"write a basic RN app, knows the primitives (View, Image, Text)"},{"level":2,"description":"write iOS or Android plugins, app on app store, has read some of the RN source, knows most of the APIs/Components off-hand"},{"level":3,"description":"write Android AND iOS plugins, app runs through CI server, contributes to OSS or React Native repo"}]},{"group":"UI and UX Design","path":"frontend/ui-and-ux-design","levels":[{"level":0,"description":""},{"level":1,"description":"Basic UI/UX: Elements, color, layout wireframing, and typography"},{"level":2,"description":"Intermediate UI/UX: whitespace, responsive design, color theory, grids, and visual heirarchy/weight."},{"level":3,"description":"Advanced UI/UX: accessibility, more responsive & visual design"}]},{"group":"Webpack","path":"frontend/webpack","levels":[{"level":0,"description":""},{"level":1,"description":"write a basic config file"},{"level":2,"description":"configure hot loading, has good familiarity with common plugins, has set up a custom dev server (webpack-dev-middleware)"},{"level":3,"description":"Has configured multiple entry points, has used isomorphic-webpack, has written a webpack plugin"}]}]},{"section":"JavaScript","groups":[{"group":"Debugging JavaScript","path":"javascript/debugging-javascript","levels":[{"level":0,"description":"Simple backtracing, logging, and error throwing"},{"level":1,"description":"Backtraces, setping up and down, break points"},{"level":2,"description":"Conditional BPs, watch statements, lexical scope, stitched backtraces"},{"level":3,"description":"CORE dump files, V8 level errors"}]},{"group":"ES6","path":"javascript/es6","levels":[{"level":0,"description":""},{"level":1,"description":"ES6 transpilation to ES5, memorized browser/node compatability, more in-depth quirks (like the difference between arrow functions and named functions, how .prototype might trip you up)"},{"level":2,"description":"Control-flow: generators, async/await, knows how `class` transpiles to ES5 and when to use it vs functions, know popular .babelrc configs and when to use babel-register babel-node and babel-polyfill, aware of browser/node compatability, knowledge of upcoming features"},{"level":3,"description":"Contributes to babel or a babel plugin, contributes to discussions on the future of ES6"}]},{"group":"JavaScript Tools","path":"javascript/javascript-tools","levels":[{"level":0,"description":""},{"level":1,"description":"Console, elements tabs of devtools, sparsely configured editor"},{"level":2,"description":"ternjs, eslint, nyc, well-configured editor, can use node in debug mode, network and sources tabs in devtools, devtools plugins"},{"level":3,"description":"devtools profiling, device simulation, and network throttling; IRHydra2"}]},{"group":"Performance","path":"javascript/performance","levels":[{"level":0,"description":"knows what garbage collection is, knows _when_ to optimize"},{"level":1,"description":"inspect heap to isolate memory leaks, CPU profile to find cpu-intensive functions"},{"level":2,"description":"improve node performance by examining generated assembly, has written transpiler or transpiling plugins\n"},{"level":3,"description":"Has optimized V8 performance by analyzing generated assembly (IRHydra2)"}]},{"group":"Vanilla JavaScript","path":"javascript/vanilla-javascript","levels":[{"level":0,"description":"The Basics. Variables, simple data types, flow control, functions, encapsulation, recursion"},{"level":1,"description":"Object Oriented Patterns. Scopes, closures, prototyps, 'this', inheritance"},{"level":2,"description":"Functional Patterns"},{"level":3,"description":"How the event loop works, how browser APIs and webworkers work, how browser rendering happens, knowledge of V8 JIT compilation"}]}]},{"section":"More","groups":[{"group":"Dev Ops","path":"more/dev-ops","levels":[{"level":0,"description":"Simple deployment"},{"level":1,"description":"Production logs, heroku addons and managing live production"},{"level":2,"description":"Staging server, pipeline, and domain registration"},{"level":3,"description":"Provisioning and configuring contrainers"}]},{"group":"Interviewing","path":"more/interviewing","levels":[{"level":0,"description":""},{"level":1,"description":"Basic Interviewing"},{"level":2,"description":"Intermediate Interviewing"},{"level":3,"description":"Live Interviewing 1"}]},{"group":"Keyboard and Typing","path":"more/keyboard-and-typing","levels":[{"level":0,"description":"Core Keyboard"},{"level":1,"description":"Intermediate Keyboard"},{"level":2,"description":"Advanced Typing"},{"level":3,"description":"Wizard level keyboard skills"}]},{"group":"Unix, shell, and terminal","path":"more/unix-shell-and-terminal","levels":[{"level":0,"description":""},{"level":1,"description":"Knows basic commands. Batch files/shell scripts. Understands environment variables, path, and package managers."},{"level":2,"description":"write makefiles or bash scripts, good with terminal, editor, pipes, and knows lots of commands offhand"},{"level":3,"description":"vim/emacs wizard, knows FHS, knows most commands offhand"}]}]},{"section":"Programming","groups":[{"group":"Algorithms","path":"programming/algorithms","levels":[{"level":0,"description":"Basic sorting, searching and data structure traversal and retrieval algorithms"},{"level":1,"description":"Big O notation. Tree, Graph, Pathfinding, simple greedy and divide and conquer algorithms. More nuanced algorithms (pathfinding, tree-traversal)"},{"level":2,"description":"Able to recognize and code dynamic programming solutions, good knowledge of graph algorithms, good knowledge of numerical computation algorithms, able to identify NP problems etc."},{"level":3,"description":"Concrete mathematical evaluation of tradeoffs between algorithms and data structures."}]},{"group":"Data Structures","path":"programming/data-structures","levels":[{"level":0,"description":"Basic ADTs (array vs hash vs stack vs queue), "},{"level":1,"description":"More nuanced ADTs (directed vs nondirected graphs, trees, etc.). Able to explain and use Arrays, Stacks, Queus, Dictionaries etc in practical programming tasks"},{"level":2,"description":"Knows space and time tradeoffs of the basic data structures, Arrays vs LinkedLists, Able to explain how hashtables can be implemented and can handle collisions, Priority queues and ways to implement them etc."},{"level":3,"description":"Basic mathematical proofs of data structure performance. Knowledge of advanced data structures like B-trees, binomial and fibonacci heaps, AVL/Red Black trees, Splay Trees, Skip Lists, tries etc."}]},{"group":"Functional Programming","path":"programming/functional-programming","levels":[{"level":0,"description":"Immutability, .map and .reduce"},{"level":1,"description":"Composition with higher-order function decorators, currying"},{"level":2,"description":"Generators/co-routines, memoization, lazy evaluation"},{"level":3,"description":"Understands deeply tradeoff/philosophy of functional programming"}]},{"group":"Object Oriented Programming","path":"programming/object-oriented-programming","levels":[{"level":0,"description":"Objects. Scope. Public/private methods and properties"},{"level":1,"description":"Inheritence. Class composition. SOLID. "},{"level":2,"description":"Factory patterns, and other OO design patterns"},{"level":3,"description":"Advanced OO"}]},{"group":"Problem Decomposition","path":"programming/problem-decomposition","levels":[{"level":0,"description":""},{"level":1,"description":""},{"level":2,"description":"Able to come up with reusable functions/objects that solve the overall problem. Basic code reuse (no copy/paste)"},{"level":3,"description":"Use of appropriate data structures and algorithms and comes up with generic/object-oriented code that encapsulate aspects of the problem that are subject to change."}]},{"group":"Regular Expressions","path":"programming/regular-expressions","levels":[{"level":0,"description":"Basic Regular Expressions"},{"level":1,"description":"Intermediate Regular Expressions"},{"level":2,"description":"Advanced Regular Expressions"},{"level":3,"description":"Ninja-level Regular Expressions"}]},{"group":"Requirements","path":"programming/requirements","levels":[{"level":0,"description":"Takes the given requirements and codes to spec"},{"level":1,"description":"Clarifies spec. through questions regarding missed cases and ambigious requirements"},{"level":2,"description":"Understand complete picture and come up with entire areas that need to be speced"},{"level":3,"description":"Able to suggest better alternatives and flows to given requirements based on experience"}]},{"group":"Systems Decomposition","path":"programming/systems-decomposition","levels":[{"level":0,"description":"Able to think/build within the level of a single file/class"},{"level":1,"description":"Able to break up problem space and design solution as long as it is within the same platform/technology"},{"level":2,"description":"Able to design and work in systems that span multiple technologies/platforms."},{"level":3,"description":"Able to visualize and design complex systems with multiple product lines and integrations with external systems. Also should be able to design operations support systems like monitoring, reporting, fail overs etc."}]},{"group":"Systems Programming","path":"programming/systems-programming","levels":[{"level":0,"description":""},{"level":1,"description":"Basic understanding of compilers, linker and interpreters. Understands what assembly code is and how things work at the hardware level. Some knowledge of virtual memory and paging."},{"level":2,"description":"Understands kernel mode vs. user mode, multi-threading, synchronization primitives and how they're implemented, able to read assembly code. Understands how networks work, understanding of network protocols and socket level programming."},{"level":3,"description":"Understands the entire programming stack, hardware (CPU + Memory + Cache + Interrupts + microcode), binary code, assembly, static and dynamic linking, compilation, interpretation, JIT compilation, garbage collection, heap, stack, memory addressing..."}]},{"group":"Testing","path":"programming/testing","levels":[{"level":0,"description":"Unit testing, enzyme, sinon, tape/mocha"},{"level":1,"description":"Separates unit and integration tests, checks code coverage, understands TDD-guided design"},{"level":2,"description":"Always writes tests first, Functional testing (selenium), Understands benefits of TDD"},{"level":3,"description":"Uses static analysis tools like cyclomatic complexity and afferent/efferent coupling checks, patterns (GoF and Fowler), nonfunctional testing (capacity testing)"}]}]},{"section":"Team Development","groups":[{"group":"Agile and Lean","path":"team-development/agile-and-lean","levels":[{"level":0,"description":"Daily standup, track progress in ticket tracker"},{"level":1,"description":"Code is deployed regularly through CI, at least 50% test coverage, basic user tracking and experiments"},{"level":2,"description":"Code is deployed multiple times a day, run through ~100% code coverage including functional/nonfunctional tests, features are validated with split testing before deemed finished"},{"level":3,"description":"Validates functionality quickly using marketing and prototypes before anything is built, multivariate testing (dozens) with statistical analysis, knows when to pivot/persevere and has experienced multiple pivots"}]},{"group":"Community Participation","path":"team-development/community-participation","levels":[{"level":0,"description":"Collects cool things on Twitter, files issues in repos, reads tech/programming blogs and podcasts regularly"},{"level":1,"description":"Writes posts on Medium, *fixes* issues on github, maintains a programming journal with some colleciton of useful articles/tools. Attended conferences. "},{"level":2,"description":"Actively maintains a popular OSS repo, benefits other programmers with their knowledge, has spoken at a conference. Maintains a blog in which personal insights and thoughts on programming are shared."},{"level":3,"description":"Has reinvented software development in some way, created a major, popular framework"}]},{"group":"Pairing","path":"team-development/pairing","levels":[{"level":0,"description":""},{"level":1,"description":"Beginning pairing"},{"level":2,"description":"Intermediate pairing"},{"level":3,"description":"Advanced pairing"}]},{"group":"Source Control","path":"team-development/source-control","levels":[{"level":0,"description":"GUI, command line basics (add, push, pull, fetch), reading from github, writing to github (PRs, forks)"},{"level":1,"description":"git command line (reset/revert), merge conflict resolution"},{"level":2,"description":"git command line (rebase, cherry-pick), has worked in an org with branching and PRs"},{"level":3,"description":"git command depth (bisect, interactive rebase, submodules, multiple remotes, git push -f), commit hooks, Integration with other services (CI, Slack)"}]},{"group":"Technical Communication","path":"team-development/technical-communication","levels":[{"level":0,"description":""},{"level":1,"description":"Peers can understand what is being said. Good spelling and grammar."},{"level":2,"description":"Communication is effective, precise and more technical"},{"level":3,"description":"Able to understand and communicate thoughts, design, ideas, specs in a unambiguous manner and adjusts communication as per the context (written, spoken, white-boarding, brainstorming, specing...etc.)"}]}]}]}